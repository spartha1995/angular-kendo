'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var alignPoint = {
    "bottom": "bottom",
    "center": "center",
    "middle": "middle",
    "left": "left",
    "right": "right",
    "top": "top"
};

var align = function (options) {
    var anchorRect = options.anchorRect;
    var anchorAlign = options.anchorAlign;
    var elementRect = options.elementRect;
    var elementAlign = options.elementAlign;
    var anchorHorizontal = anchorAlign.horizontal;
    var anchorVertical = anchorAlign.vertical;
    var elementHorizontal = elementAlign.horizontal;
    var elementVertical = elementAlign.vertical;

    var top = anchorRect.top;
    var left = anchorRect.left;

    if (anchorVertical === alignPoint.bottom) {
        top += anchorRect.height;
    }

    if (anchorVertical === alignPoint.center || anchorVertical === alignPoint.middle) {
        top += Math.round(anchorRect.height / 2);
    }

    if (elementVertical === alignPoint.bottom) {
        top -= elementRect.height;
    }

    if (elementVertical === alignPoint.center || elementVertical === alignPoint.middle) {
        top -= Math.round(elementRect.height / 2);
    }

    if (anchorHorizontal === alignPoint.right) {
        left += anchorRect.width;
    }

    if (anchorHorizontal === alignPoint.center || anchorHorizontal === alignPoint.middle) {
        left += Math.round(anchorRect.width / 2);
    }

    if (elementHorizontal === alignPoint.right) {
        left -= elementRect.width;
    }

    if (elementHorizontal === alignPoint.center || elementHorizontal === alignPoint.middle) {
        left -= Math.round(elementRect.width / 2);
    }

    return {
        top: top,
        left: left
    };
};

function addScroll(rect, scroll) {
    return {
        top: rect.top + scroll.y,
        left: rect.left + scroll.x,
        height: rect.height,
        width: rect.width
    };
}

function applyLocationOffset(rect, location, isOffsetBody) {
    var top = rect.top;
    var left = rect.left;

    if (isOffsetBody) {
        left = 0;
        top = 0;
    }

    return {
        top: top + location.top,
        left: left + location.left,
        height: rect.height,
        width: rect.width
    };
}

var boundingOffset = function (element) {
    if (!element.getBoundingClientRect) {
        return {
            bottom: element.innerHeight,
            left: 0,
            right: element.innerWidth,
            top: 0
        };
    }

    var ref = element.getBoundingClientRect();
    var bottom = ref.bottom;
    var left = ref.left;
    var right = ref.right;
    var top = ref.top;

    return {
        bottom: bottom,
        left: left,
        right: right,
        top: top
    };
};

var getDocument = function (element) { return ( element.ownerDocument.documentElement ); };

var offsetParent = function (element) {
    var offsetParent = element.offsetParent;

    while (offsetParent && offsetParent.style.position === "static") {
        offsetParent = offsetParent.offsetParent;
    }

    return offsetParent || getDocument(element);
};

var isBodyOffset = function (element) { return (offsetParent(element) === element.ownerDocument.body); };

var rectOfHiddenElement = function (element) {
    var ref = element.style;
    var display = ref.display;
    var left = ref.left;
    var position = ref.position;

    element.style.display = '';
    element.style.left = '-10000px';
    element.style.position = 'absolute';

    var rect = element.getBoundingClientRect();

    element.style.display = display;
    element.style.left = left;
    element.style.position = position;

    return rect;
};

var offset = function (element) {
    var rect = element.getBoundingClientRect();
    var left = rect.left;
    var top = rect.top;

    if (!rect.height && !rect.width) {
        rect = rectOfHiddenElement(element);
    }

    return {
        top: top,
        left: left,
        height: rect.height,
        width: rect.width
    };
};

var parents = function (element, until) {
    var result = [];
    var next = element.parentNode;

    while (next) {
        result.push(next);

        if (next === until) { break; }

        next = next.parentNode;
    }

    return result;
};

var getWindow = function (element) { return ( element.ownerDocument.defaultView ); };

function scrollPosition(element) {
    var documentElement = getDocument(element);
    var win = getWindow(element);

    return {
        x: win.pageXOffset || documentElement.scrollLeft || 0,
        y: win.pageYOffset || documentElement.scrollTop || 0
    };
}

var elementScrollPosition = function (element) {
    if (element === (element.ownerDocument || {}).body) {
        return scrollPosition(element);
    }

    return {
        x: element.scrollLeft,
        y: element.scrollTop
    };
};

function parentScrollPosition(element) {
    var parent = offsetParent(element);

    return parent ? elementScrollPosition(parent) : { x: 0, y: 0 };
}

var position = function (element, parent) {
    var win = getWindow(element);
    var elementStyles = win.getComputedStyle(element);
    var offset$$1 = offset(element);
    var parentElement = parent || offsetParent(element);

    var ownerDocument = element.ownerDocument;
    var useRelative = parentElement !== ownerDocument.body && parentElement !== ownerDocument.documentElement;

    var parentOffset = { top: 0, left: 0 };

    if (elementStyles.position !== "fixed" && useRelative) {
        var parentStyles = win.getComputedStyle(parentElement);

        parentOffset = offset(parentElement);
        parentOffset.top += parseInt(parentStyles.borderTopWidth, 10);
        parentOffset.left += parseInt(parentStyles.borderLeftWidth, 10);
    }

    return {
        top: offset$$1.top - parentOffset.top - parseInt(elementStyles.marginTop, 10),
        left: offset$$1.left - parentOffset.left - parseInt(elementStyles.marginLeft, 10),
        height: offset$$1.height,
        width: offset$$1.width
    };
};

var offsetParentScrollPosition = function (offsetParentElement, element) { return ( // eslint-disable-line no-arrow-condition
    offsetParentElement ? elementScrollPosition(offsetParentElement) : parentScrollPosition(element)
); };

var positionWithScroll = function (element, parent) {
    var offsetParentElement = parent ? offsetParent(parent) : null;
    var ref = position(element, offsetParentElement);
    var top = ref.top;
    var left = ref.left;
    var height = ref.height;
    var width = ref.width;
    var ref$1 = offsetParentScrollPosition(offsetParentElement, element);
    var x = ref$1.x;
    var y = ref$1.y;

    return {
        top: top + y,
        left: left + x,
        height: height,
        width: width
    };
};

function removeScroll(rect, scroll) {
    return {
        top: rect.top - scroll.y,
        left: rect.left - scroll.x,
        height: rect.height,
        width: rect.width
    };
}

var collision = {
    "fit": "fit",
    "flip": "flip"
};

var fit = function(position, size, viewPortSize) {
    var output = 0;

    if (position + size > viewPortSize) {
        output = viewPortSize - (position + size);
    }

    if (position < 0) {
        output = -position;
    }

    return output;
};

var flip = function(ref) {
    var offset = ref.offset;
    var size = ref.size;
    var anchorSize = ref.anchorSize;
    var viewPortSize = ref.viewPortSize;
    var anchorAlignPoint = ref.anchorAlignPoint;
    var elementAlignPoint = ref.elementAlignPoint;

    var output = 0;

    var isPositionCentered = elementAlignPoint === alignPoint.center || elementAlignPoint === alignPoint.middle;
    var isOriginCentered = anchorAlignPoint === alignPoint.center || anchorAlignPoint === alignPoint.middle;

    if (elementAlignPoint !== anchorAlignPoint && !isPositionCentered && !isOriginCentered && offset > -1) {
        if (offset + size > viewPortSize) {
            output += -(anchorSize + size);
        }

        if (offset + output < 0) {
            output += anchorSize + size;
        }
    }
    return output;
};

var restrictToView = function (options) {
    var anchorRect = options.anchorRect;
    var anchorAlign = options.anchorAlign;
    var elementRect = options.elementRect;
    var elementAlign = options.elementAlign;
    var collisions = options.collisions;
    var viewPort = options.viewPort;
    var elementTop = elementRect.top;
    var elementLeft = elementRect.left;
    var elementHeight = elementRect.height;
    var elementWidth = elementRect.width;
    var viewPortHeight = viewPort.height;
    var viewPortWidth = viewPort.width;

    var left = 0;
    var top = 0;

    var isHorizontalFlip = collisions.horizontal === collision.flip;
    var isVerticalFlip = collisions.vertical === collision.flip;

    if (collisions.vertical === collision.fit) {
        top += fit(elementTop, elementHeight, viewPortHeight);
    }

    if (collisions.horizontal === collision.fit) {
        left += fit(elementLeft, elementWidth, viewPortWidth);
    }

    if (isVerticalFlip) {
        top += flip({
            offset: elementTop,
            size: elementHeight,
            anchorSize: anchorRect.height,
            viewPortSize: viewPortHeight,
            anchorAlignPoint: anchorAlign.vertical,
            elementAlignPoint: elementAlign.vertical
        });
    }

    if (isHorizontalFlip) {
        left += flip({
            offset: elementLeft,
            size: elementWidth,
            anchorSize: anchorRect.width,
            viewPortSize: viewPortWidth,
            anchorAlignPoint: anchorAlign.horizontal,
            elementAlignPoint: elementAlign.horizontal
        });
    }

    return {
        flipped: (isHorizontalFlip && left !== 0) || (isVerticalFlip && top !== 0),
        offset: {
            left: left,
            top: top
        }
    };
};

var siblings = function (element) {
    var result = [];

    var sibling = element.parentNode.firstElementChild;

    while (sibling) {
        if (sibling !== element) {
            result.push(sibling);
        }

        sibling = sibling.nextElementSibling;
    }
    return result;
};

/* eslint-disable no-loop-func */

var siblingContainer = function (anchor, container) {
    var parentElements = parents(anchor);
    var containerElement = container;
    var siblingElements;
    var result;

    while (containerElement) {
        siblingElements = siblings(containerElement);

        result = parentElements.reduce(
            function (list, p) { return list.concat(siblingElements.filter(function (s) { return s === p; })); },
            []
        )[0];

        if (result) { break; }

        containerElement = containerElement.parentElement;
    }

    return result;
};

function windowViewport(element) {
    var win = getWindow(element);

    return {
        height: win.innerHeight,
        width: win.innerWidth
    };
}

exports.align = align;
exports.addScroll = addScroll;
exports.applyLocationOffset = applyLocationOffset;
exports.boundingOffset = boundingOffset;
exports.isBodyOffset = isBodyOffset;
exports.offsetParent = offsetParent;
exports.offset = offset;
exports.parents = parents;
exports.parentScrollPosition = parentScrollPosition;
exports.position = position;
exports.positionWithScroll = positionWithScroll;
exports.removeScroll = removeScroll;
exports.restrictToView = restrictToView;
exports.scrollPosition = scrollPosition;
exports.siblingContainer = siblingContainer;
exports.siblings = siblings;
exports.getDocumentElement = getDocument;
exports.getWindow = getWindow;
exports.getWindowViewPort = windowViewport;
exports.AlignPoint = alignPoint;
exports.Collision = collision;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi91c3IvbG9jYWwvamVua2lucy93b3Jrc3BhY2Uva2VuZG8tcG9wdXAtY29tbW9uX3JlbGVhc2Uvc3JjL2FsaWduLXBvaW50LmpzIiwiL3Vzci9sb2NhbC9qZW5raW5zL3dvcmtzcGFjZS9rZW5kby1wb3B1cC1jb21tb25fcmVsZWFzZS9zcmMvYWxpZ24uanMiLCIvdXNyL2xvY2FsL2plbmtpbnMvd29ya3NwYWNlL2tlbmRvLXBvcHVwLWNvbW1vbl9yZWxlYXNlL3NyYy9hZGQtc2Nyb2xsLmpzIiwiL3Vzci9sb2NhbC9qZW5raW5zL3dvcmtzcGFjZS9rZW5kby1wb3B1cC1jb21tb25fcmVsZWFzZS9zcmMvYXBwbHktbG9jYXRpb24tb2Zmc2V0LmpzIiwiL3Vzci9sb2NhbC9qZW5raW5zL3dvcmtzcGFjZS9rZW5kby1wb3B1cC1jb21tb25fcmVsZWFzZS9zcmMvYm91bmRpbmctb2Zmc2V0LmpzIiwiL3Vzci9sb2NhbC9qZW5raW5zL3dvcmtzcGFjZS9rZW5kby1wb3B1cC1jb21tb25fcmVsZWFzZS9zcmMvZG9jdW1lbnQuanMiLCIvdXNyL2xvY2FsL2plbmtpbnMvd29ya3NwYWNlL2tlbmRvLXBvcHVwLWNvbW1vbl9yZWxlYXNlL3NyYy9vZmZzZXQtcGFyZW50LmpzIiwiL3Vzci9sb2NhbC9qZW5raW5zL3dvcmtzcGFjZS9rZW5kby1wb3B1cC1jb21tb25fcmVsZWFzZS9zcmMvaXMtYm9keS1vZmZzZXQuanMiLCIvdXNyL2xvY2FsL2plbmtpbnMvd29ya3NwYWNlL2tlbmRvLXBvcHVwLWNvbW1vbl9yZWxlYXNlL3NyYy9vZmZzZXQuanMiLCIvdXNyL2xvY2FsL2plbmtpbnMvd29ya3NwYWNlL2tlbmRvLXBvcHVwLWNvbW1vbl9yZWxlYXNlL3NyYy9wYXJlbnRzLmpzIiwiL3Vzci9sb2NhbC9qZW5raW5zL3dvcmtzcGFjZS9rZW5kby1wb3B1cC1jb21tb25fcmVsZWFzZS9zcmMvd2luZG93LmpzIiwiL3Vzci9sb2NhbC9qZW5raW5zL3dvcmtzcGFjZS9rZW5kby1wb3B1cC1jb21tb25fcmVsZWFzZS9zcmMvc2Nyb2xsLXBvc2l0aW9uLmpzIiwiL3Vzci9sb2NhbC9qZW5raW5zL3dvcmtzcGFjZS9rZW5kby1wb3B1cC1jb21tb25fcmVsZWFzZS9zcmMvZWxlbWVudC1zY3JvbGwtcG9zaXRpb24uanMiLCIvdXNyL2xvY2FsL2plbmtpbnMvd29ya3NwYWNlL2tlbmRvLXBvcHVwLWNvbW1vbl9yZWxlYXNlL3NyYy9wYXJlbnQtc2Nyb2xsLXBvc2l0aW9uLmpzIiwiL3Vzci9sb2NhbC9qZW5raW5zL3dvcmtzcGFjZS9rZW5kby1wb3B1cC1jb21tb25fcmVsZWFzZS9zcmMvcG9zaXRpb24uanMiLCIvdXNyL2xvY2FsL2plbmtpbnMvd29ya3NwYWNlL2tlbmRvLXBvcHVwLWNvbW1vbl9yZWxlYXNlL3NyYy9vZmZzZXQtcGFyZW50LXNjcm9sbC1wb3NpdGlvbi5qcyIsIi91c3IvbG9jYWwvamVua2lucy93b3Jrc3BhY2Uva2VuZG8tcG9wdXAtY29tbW9uX3JlbGVhc2Uvc3JjL3Bvc2l0aW9uLXdpdGgtc2Nyb2xsLmpzIiwiL3Vzci9sb2NhbC9qZW5raW5zL3dvcmtzcGFjZS9rZW5kby1wb3B1cC1jb21tb25fcmVsZWFzZS9zcmMvcmVtb3ZlLXNjcm9sbC5qcyIsIi91c3IvbG9jYWwvamVua2lucy93b3Jrc3BhY2Uva2VuZG8tcG9wdXAtY29tbW9uX3JlbGVhc2Uvc3JjL2NvbGxpc2lvbi5qcyIsIi91c3IvbG9jYWwvamVua2lucy93b3Jrc3BhY2Uva2VuZG8tcG9wdXAtY29tbW9uX3JlbGVhc2Uvc3JjL3Jlc3RyaWN0LXRvLXZpZXcuanMiLCIvdXNyL2xvY2FsL2plbmtpbnMvd29ya3NwYWNlL2tlbmRvLXBvcHVwLWNvbW1vbl9yZWxlYXNlL3NyYy9zaWJsaW5ncy5qcyIsIi91c3IvbG9jYWwvamVua2lucy93b3Jrc3BhY2Uva2VuZG8tcG9wdXAtY29tbW9uX3JlbGVhc2Uvc3JjL3NpYmxpbmctY29udGFpbmVyLmpzIiwiL3Vzci9sb2NhbC9qZW5raW5zL3dvcmtzcGFjZS9rZW5kby1wb3B1cC1jb21tb25fcmVsZWFzZS9zcmMvd2luZG93LXZpZXdwb3J0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgICBcImJvdHRvbVwiOiBcImJvdHRvbVwiLFxuICAgIFwiY2VudGVyXCI6IFwiY2VudGVyXCIsXG4gICAgXCJtaWRkbGVcIjogXCJtaWRkbGVcIixcbiAgICBcImxlZnRcIjogXCJsZWZ0XCIsXG4gICAgXCJyaWdodFwiOiBcInJpZ2h0XCIsXG4gICAgXCJ0b3BcIjogXCJ0b3BcIlxufTtcbiIsImltcG9ydCBwb2ludCBmcm9tICcuL2FsaWduLXBvaW50JztcblxuY29uc3QgYWxpZ24gPSAob3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IHsgYW5jaG9yUmVjdCwgYW5jaG9yQWxpZ24sIGVsZW1lbnRSZWN0LCBlbGVtZW50QWxpZ24gfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgYW5jaG9ySG9yaXpvbnRhbCA9IGFuY2hvckFsaWduLmhvcml6b250YWw7XG4gICAgY29uc3QgYW5jaG9yVmVydGljYWwgPSBhbmNob3JBbGlnbi52ZXJ0aWNhbDtcbiAgICBjb25zdCBlbGVtZW50SG9yaXpvbnRhbCA9IGVsZW1lbnRBbGlnbi5ob3Jpem9udGFsO1xuICAgIGNvbnN0IGVsZW1lbnRWZXJ0aWNhbCA9IGVsZW1lbnRBbGlnbi52ZXJ0aWNhbDtcblxuICAgIGxldCB0b3AgPSBhbmNob3JSZWN0LnRvcDtcbiAgICBsZXQgbGVmdCA9IGFuY2hvclJlY3QubGVmdDtcblxuICAgIGlmIChhbmNob3JWZXJ0aWNhbCA9PT0gcG9pbnQuYm90dG9tKSB7XG4gICAgICAgIHRvcCArPSBhbmNob3JSZWN0LmhlaWdodDtcbiAgICB9XG5cbiAgICBpZiAoYW5jaG9yVmVydGljYWwgPT09IHBvaW50LmNlbnRlciB8fCBhbmNob3JWZXJ0aWNhbCA9PT0gcG9pbnQubWlkZGxlKSB7XG4gICAgICAgIHRvcCArPSBNYXRoLnJvdW5kKGFuY2hvclJlY3QuaGVpZ2h0IC8gMik7XG4gICAgfVxuXG4gICAgaWYgKGVsZW1lbnRWZXJ0aWNhbCA9PT0gcG9pbnQuYm90dG9tKSB7XG4gICAgICAgIHRvcCAtPSBlbGVtZW50UmVjdC5oZWlnaHQ7XG4gICAgfVxuXG4gICAgaWYgKGVsZW1lbnRWZXJ0aWNhbCA9PT0gcG9pbnQuY2VudGVyIHx8IGVsZW1lbnRWZXJ0aWNhbCA9PT0gcG9pbnQubWlkZGxlKSB7XG4gICAgICAgIHRvcCAtPSBNYXRoLnJvdW5kKGVsZW1lbnRSZWN0LmhlaWdodCAvIDIpO1xuICAgIH1cblxuICAgIGlmIChhbmNob3JIb3Jpem9udGFsID09PSBwb2ludC5yaWdodCkge1xuICAgICAgICBsZWZ0ICs9IGFuY2hvclJlY3Qud2lkdGg7XG4gICAgfVxuXG4gICAgaWYgKGFuY2hvckhvcml6b250YWwgPT09IHBvaW50LmNlbnRlciB8fCBhbmNob3JIb3Jpem9udGFsID09PSBwb2ludC5taWRkbGUpIHtcbiAgICAgICAgbGVmdCArPSBNYXRoLnJvdW5kKGFuY2hvclJlY3Qud2lkdGggLyAyKTtcbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudEhvcml6b250YWwgPT09IHBvaW50LnJpZ2h0KSB7XG4gICAgICAgIGxlZnQgLT0gZWxlbWVudFJlY3Qud2lkdGg7XG4gICAgfVxuXG4gICAgaWYgKGVsZW1lbnRIb3Jpem9udGFsID09PSBwb2ludC5jZW50ZXIgfHwgZWxlbWVudEhvcml6b250YWwgPT09IHBvaW50Lm1pZGRsZSkge1xuICAgICAgICBsZWZ0IC09IE1hdGgucm91bmQoZWxlbWVudFJlY3Qud2lkdGggLyAyKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IHRvcCxcbiAgICAgICAgbGVmdDogbGVmdFxuICAgIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBhbGlnbjtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZFNjcm9sbChyZWN0LCBzY3JvbGwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IHJlY3QudG9wICsgc2Nyb2xsLnksXG4gICAgICAgIGxlZnQ6IHJlY3QubGVmdCArIHNjcm9sbC54LFxuICAgICAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0LFxuICAgICAgICB3aWR0aDogcmVjdC53aWR0aFxuICAgIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhcHBseUxvY2F0aW9uT2Zmc2V0KHJlY3QsIGxvY2F0aW9uLCBpc09mZnNldEJvZHkpIHtcbiAgICBsZXQgeyB0b3AsIGxlZnQgfSA9IHJlY3Q7XG5cbiAgICBpZiAoaXNPZmZzZXRCb2R5KSB7XG4gICAgICAgIGxlZnQgPSAwO1xuICAgICAgICB0b3AgPSAwO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogdG9wICsgbG9jYXRpb24udG9wLFxuICAgICAgICBsZWZ0OiBsZWZ0ICsgbG9jYXRpb24ubGVmdCxcbiAgICAgICAgaGVpZ2h0OiByZWN0LmhlaWdodCxcbiAgICAgICAgd2lkdGg6IHJlY3Qud2lkdGhcbiAgICB9O1xufVxuIiwiY29uc3QgYm91bmRpbmdPZmZzZXQgPSAoZWxlbWVudCkgPT4ge1xuICAgIGlmICghZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJvdHRvbTogZWxlbWVudC5pbm5lckhlaWdodCxcbiAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICByaWdodDogZWxlbWVudC5pbm5lcldpZHRoLFxuICAgICAgICAgICAgdG9wOiAwXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3QgeyBib3R0b20sIGxlZnQsIHJpZ2h0LCB0b3AgfSA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBib3R0b20sXG4gICAgICAgIGxlZnQsXG4gICAgICAgIHJpZ2h0LFxuICAgICAgICB0b3BcbiAgICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgYm91bmRpbmdPZmZzZXQ7XG4iLCJjb25zdCBnZXREb2N1bWVudCA9IChlbGVtZW50KSA9PiAoIGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgKTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0RG9jdW1lbnQ7XG4iLCJpbXBvcnQgZG9jdW1lbnRFbGVtZW50IGZyb20gJy4vZG9jdW1lbnQnO1xuXG5jb25zdCBvZmZzZXRQYXJlbnQgPSAoZWxlbWVudCkgPT4ge1xuICAgIGxldCBvZmZzZXRQYXJlbnQgPSBlbGVtZW50Lm9mZnNldFBhcmVudDtcblxuICAgIHdoaWxlIChvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50LnN0eWxlLnBvc2l0aW9uID09PSBcInN0YXRpY1wiKSB7XG4gICAgICAgIG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQoZWxlbWVudCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBvZmZzZXRQYXJlbnQ7XG4iLCJpbXBvcnQgb2Zmc2V0UGFyZW50IGZyb20gJy4vb2Zmc2V0LXBhcmVudCc7XG5cbmNvbnN0IGlzQm9keU9mZnNldCA9IChlbGVtZW50KSA9PiAob2Zmc2V0UGFyZW50KGVsZW1lbnQpID09PSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuYm9keSk7XG5cbmV4cG9ydCBkZWZhdWx0IGlzQm9keU9mZnNldDtcbiIsImNvbnN0IHJlY3RPZkhpZGRlbkVsZW1lbnQgPSAoZWxlbWVudCkgPT4ge1xuICAgIGNvbnN0IHsgZGlzcGxheSwgbGVmdCwgcG9zaXRpb24gfSA9IGVsZW1lbnQuc3R5bGU7XG5cbiAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgICBlbGVtZW50LnN0eWxlLmxlZnQgPSAnLTEwMDAwcHgnO1xuICAgIGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuXG4gICAgY29uc3QgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5O1xuICAgIGVsZW1lbnQuc3R5bGUubGVmdCA9IGxlZnQ7XG4gICAgZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9IHBvc2l0aW9uO1xuXG4gICAgcmV0dXJuIHJlY3Q7XG59O1xuXG5jb25zdCBvZmZzZXQgPSAoZWxlbWVudCkgPT4ge1xuICAgIGxldCByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBsZXQgeyBsZWZ0LCB0b3AgfSA9IHJlY3Q7XG5cbiAgICBpZiAoIXJlY3QuaGVpZ2h0ICYmICFyZWN0LndpZHRoKSB7XG4gICAgICAgIHJlY3QgPSByZWN0T2ZIaWRkZW5FbGVtZW50KGVsZW1lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogdG9wLFxuICAgICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0LFxuICAgICAgICB3aWR0aDogcmVjdC53aWR0aFxuICAgIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBvZmZzZXQ7XG4iLCJleHBvcnQgZGVmYXVsdCAoZWxlbWVudCwgdW50aWwpID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBsZXQgbmV4dCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcblxuICAgIHdoaWxlIChuZXh0KSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKG5leHQpO1xuXG4gICAgICAgIGlmIChuZXh0ID09PSB1bnRpbCkgeyBicmVhazsgfVxuXG4gICAgICAgIG5leHQgPSBuZXh0LnBhcmVudE5vZGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJjb25zdCBnZXRXaW5kb3cgPSAoZWxlbWVudCkgPT4gKCBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgKTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0V2luZG93O1xuIiwiaW1wb3J0IGRvY0VsZW1lbnQgZnJvbSAnLi9kb2N1bWVudCc7XG5pbXBvcnQgd25kIGZyb20gJy4vd2luZG93JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2Nyb2xsUG9zaXRpb24oZWxlbWVudCkge1xuICAgIGNvbnN0IGRvY3VtZW50RWxlbWVudCA9IGRvY0VsZW1lbnQoZWxlbWVudCk7XG4gICAgY29uc3Qgd2luID0gd25kKGVsZW1lbnQpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogd2luLnBhZ2VYT2Zmc2V0IHx8IGRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0IHx8IDAsXG4gICAgICAgIHk6IHdpbi5wYWdlWU9mZnNldCB8fCBkb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIHx8IDBcbiAgICB9O1xufVxuIiwiaW1wb3J0IHNjcm9sbFBvc2l0aW9uIGZyb20gJy4vc2Nyb2xsLXBvc2l0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgKGVsZW1lbnQpID0+IHtcbiAgICBpZiAoZWxlbWVudCA9PT0gKGVsZW1lbnQub3duZXJEb2N1bWVudCB8fCB7fSkuYm9keSkge1xuICAgICAgICByZXR1cm4gc2Nyb2xsUG9zaXRpb24oZWxlbWVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogZWxlbWVudC5zY3JvbGxMZWZ0LFxuICAgICAgICB5OiBlbGVtZW50LnNjcm9sbFRvcFxuICAgIH07XG59O1xuIiwiaW1wb3J0IG9mZnNldFBhcmVudCBmcm9tICcuL29mZnNldC1wYXJlbnQnO1xuaW1wb3J0IGVsZW1lbnRTY3JvbGxQb3NpdGlvbiBmcm9tICcuL2VsZW1lbnQtc2Nyb2xsLXBvc2l0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFyZW50U2Nyb2xsUG9zaXRpb24oZWxlbWVudCkge1xuICAgIGNvbnN0IHBhcmVudCA9IG9mZnNldFBhcmVudChlbGVtZW50KTtcblxuICAgIHJldHVybiBwYXJlbnQgPyBlbGVtZW50U2Nyb2xsUG9zaXRpb24ocGFyZW50KSA6IHsgeDogMCwgeTogMCB9O1xufVxuIiwiaW1wb3J0IG9mZnNldFBhcmVudCBmcm9tICcuL29mZnNldC1wYXJlbnQnO1xuaW1wb3J0IG9mZnNldFJlY3QgZnJvbSAnLi9vZmZzZXQnO1xuaW1wb3J0IHduZCBmcm9tICcuL3dpbmRvdyc7XG5cbmNvbnN0IHBvc2l0aW9uID0gKGVsZW1lbnQsIHBhcmVudCkgPT4ge1xuICAgIGNvbnN0IHdpbiA9IHduZChlbGVtZW50KTtcbiAgICBjb25zdCBlbGVtZW50U3R5bGVzID0gd2luLmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gICAgY29uc3Qgb2Zmc2V0ID0gb2Zmc2V0UmVjdChlbGVtZW50KTtcbiAgICBjb25zdCBwYXJlbnRFbGVtZW50ID0gcGFyZW50IHx8IG9mZnNldFBhcmVudChlbGVtZW50KTtcblxuICAgIGNvbnN0IG93bmVyRG9jdW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gICAgY29uc3QgdXNlUmVsYXRpdmUgPSBwYXJlbnRFbGVtZW50ICE9PSBvd25lckRvY3VtZW50LmJvZHkgJiYgcGFyZW50RWxlbWVudCAhPT0gb3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgICBsZXQgcGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuICAgIGlmIChlbGVtZW50U3R5bGVzLnBvc2l0aW9uICE9PSBcImZpeGVkXCIgJiYgdXNlUmVsYXRpdmUpIHtcbiAgICAgICAgY29uc3QgcGFyZW50U3R5bGVzID0gd2luLmdldENvbXB1dGVkU3R5bGUocGFyZW50RWxlbWVudCk7XG5cbiAgICAgICAgcGFyZW50T2Zmc2V0ID0gb2Zmc2V0UmVjdChwYXJlbnRFbGVtZW50KTtcbiAgICAgICAgcGFyZW50T2Zmc2V0LnRvcCArPSBwYXJzZUludChwYXJlbnRTdHlsZXMuYm9yZGVyVG9wV2lkdGgsIDEwKTtcbiAgICAgICAgcGFyZW50T2Zmc2V0LmxlZnQgKz0gcGFyc2VJbnQocGFyZW50U3R5bGVzLmJvcmRlckxlZnRXaWR0aCwgMTApO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBwYXJzZUludChlbGVtZW50U3R5bGVzLm1hcmdpblRvcCwgMTApLFxuICAgICAgICBsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0gcGFyc2VJbnQoZWxlbWVudFN0eWxlcy5tYXJnaW5MZWZ0LCAxMCksXG4gICAgICAgIGhlaWdodDogb2Zmc2V0LmhlaWdodCxcbiAgICAgICAgd2lkdGg6IG9mZnNldC53aWR0aFxuICAgIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwb3NpdGlvbjtcbiIsImltcG9ydCBlbGVtZW50U2Nyb2xsUG9zaXRpb24gZnJvbSAnLi9lbGVtZW50LXNjcm9sbC1wb3NpdGlvbic7XG5pbXBvcnQgcGFyZW50U2Nyb2xsUG9zaXRpb24gZnJvbSAnLi9wYXJlbnQtc2Nyb2xsLXBvc2l0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgKG9mZnNldFBhcmVudEVsZW1lbnQsIGVsZW1lbnQpID0+ICggLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hcnJvdy1jb25kaXRpb25cbiAgICBvZmZzZXRQYXJlbnRFbGVtZW50ID8gZWxlbWVudFNjcm9sbFBvc2l0aW9uKG9mZnNldFBhcmVudEVsZW1lbnQpIDogcGFyZW50U2Nyb2xsUG9zaXRpb24oZWxlbWVudClcbik7XG4iLCJpbXBvcnQgb2Zmc2V0UGFyZW50U2Nyb2xsUG9zaXRpb24gZnJvbSAnLi9vZmZzZXQtcGFyZW50LXNjcm9sbC1wb3NpdGlvbic7XG5pbXBvcnQgb2Zmc2V0UGFyZW50IGZyb20gJy4vb2Zmc2V0LXBhcmVudCc7XG5pbXBvcnQgcG9zaXRpb24gZnJvbSAnLi9wb3NpdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IChlbGVtZW50LCBwYXJlbnQpID0+IHtcbiAgICBjb25zdCBvZmZzZXRQYXJlbnRFbGVtZW50ID0gcGFyZW50ID8gb2Zmc2V0UGFyZW50KHBhcmVudCkgOiBudWxsO1xuICAgIGNvbnN0IHsgdG9wLCBsZWZ0LCBoZWlnaHQsIHdpZHRoIH0gPSBwb3NpdGlvbihlbGVtZW50LCBvZmZzZXRQYXJlbnRFbGVtZW50KTtcbiAgICBjb25zdCB7IHgsIHkgfSA9IG9mZnNldFBhcmVudFNjcm9sbFBvc2l0aW9uKG9mZnNldFBhcmVudEVsZW1lbnQsIGVsZW1lbnQpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiB0b3AgKyB5LFxuICAgICAgICBsZWZ0OiBsZWZ0ICsgeCxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgIHdpZHRoOiB3aWR0aFxuICAgIH07XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtb3ZlU2Nyb2xsKHJlY3QsIHNjcm9sbCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogcmVjdC50b3AgLSBzY3JvbGwueSxcbiAgICAgICAgbGVmdDogcmVjdC5sZWZ0IC0gc2Nyb2xsLngsXG4gICAgICAgIGhlaWdodDogcmVjdC5oZWlnaHQsXG4gICAgICAgIHdpZHRoOiByZWN0LndpZHRoXG4gICAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgICBcImZpdFwiOiBcImZpdFwiLFxuICAgIFwiZmxpcFwiOiBcImZsaXBcIlxufTtcbiIsImltcG9ydCBhbGlnblBvaW50IGZyb20gJy4vYWxpZ24tcG9pbnQnO1xuaW1wb3J0IGNvbGxpc2lvbiBmcm9tICcuL2NvbGxpc2lvbic7XG5cbmNvbnN0IGZpdCA9IGZ1bmN0aW9uKHBvc2l0aW9uLCBzaXplLCB2aWV3UG9ydFNpemUpIHtcbiAgICBsZXQgb3V0cHV0ID0gMDtcblxuICAgIGlmIChwb3NpdGlvbiArIHNpemUgPiB2aWV3UG9ydFNpemUpIHtcbiAgICAgICAgb3V0cHV0ID0gdmlld1BvcnRTaXplIC0gKHBvc2l0aW9uICsgc2l6ZSk7XG4gICAgfVxuXG4gICAgaWYgKHBvc2l0aW9uIDwgMCkge1xuICAgICAgICBvdXRwdXQgPSAtcG9zaXRpb247XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dHB1dDtcbn07XG5cbmNvbnN0IGZsaXAgPSBmdW5jdGlvbih7IG9mZnNldCwgc2l6ZSwgYW5jaG9yU2l6ZSwgdmlld1BvcnRTaXplLCBhbmNob3JBbGlnblBvaW50LCBlbGVtZW50QWxpZ25Qb2ludCB9KSB7XG4gICAgbGV0IG91dHB1dCA9IDA7XG5cbiAgICBjb25zdCBpc1Bvc2l0aW9uQ2VudGVyZWQgPSBlbGVtZW50QWxpZ25Qb2ludCA9PT0gYWxpZ25Qb2ludC5jZW50ZXIgfHwgZWxlbWVudEFsaWduUG9pbnQgPT09IGFsaWduUG9pbnQubWlkZGxlO1xuICAgIGNvbnN0IGlzT3JpZ2luQ2VudGVyZWQgPSBhbmNob3JBbGlnblBvaW50ID09PSBhbGlnblBvaW50LmNlbnRlciB8fCBhbmNob3JBbGlnblBvaW50ID09PSBhbGlnblBvaW50Lm1pZGRsZTtcblxuICAgIGlmIChlbGVtZW50QWxpZ25Qb2ludCAhPT0gYW5jaG9yQWxpZ25Qb2ludCAmJiAhaXNQb3NpdGlvbkNlbnRlcmVkICYmICFpc09yaWdpbkNlbnRlcmVkICYmIG9mZnNldCA+IC0xKSB7XG4gICAgICAgIGlmIChvZmZzZXQgKyBzaXplID4gdmlld1BvcnRTaXplKSB7XG4gICAgICAgICAgICBvdXRwdXQgKz0gLShhbmNob3JTaXplICsgc2l6ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob2Zmc2V0ICsgb3V0cHV0IDwgMCkge1xuICAgICAgICAgICAgb3V0cHV0ICs9IGFuY2hvclNpemUgKyBzaXplO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG59O1xuXG5jb25zdCByZXN0cmljdFRvVmlldyA9IChvcHRpb25zKSA9PiB7XG4gICAgY29uc3QgeyBhbmNob3JSZWN0LCBhbmNob3JBbGlnbiwgZWxlbWVudFJlY3QsIGVsZW1lbnRBbGlnbiwgY29sbGlzaW9ucywgdmlld1BvcnQgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgeyB0b3A6IGVsZW1lbnRUb3AsIGxlZnQ6IGVsZW1lbnRMZWZ0LCBoZWlnaHQ6IGVsZW1lbnRIZWlnaHQsIHdpZHRoOiBlbGVtZW50V2lkdGggfSA9IGVsZW1lbnRSZWN0O1xuICAgIGNvbnN0IHsgaGVpZ2h0OiB2aWV3UG9ydEhlaWdodCwgd2lkdGg6IHZpZXdQb3J0V2lkdGggfSA9IHZpZXdQb3J0O1xuXG4gICAgbGV0IGxlZnQgPSAwO1xuICAgIGxldCB0b3AgPSAwO1xuXG4gICAgY29uc3QgaXNIb3Jpem9udGFsRmxpcCA9IGNvbGxpc2lvbnMuaG9yaXpvbnRhbCA9PT0gY29sbGlzaW9uLmZsaXA7XG4gICAgY29uc3QgaXNWZXJ0aWNhbEZsaXAgPSBjb2xsaXNpb25zLnZlcnRpY2FsID09PSBjb2xsaXNpb24uZmxpcDtcblxuICAgIGlmIChjb2xsaXNpb25zLnZlcnRpY2FsID09PSBjb2xsaXNpb24uZml0KSB7XG4gICAgICAgIHRvcCArPSBmaXQoZWxlbWVudFRvcCwgZWxlbWVudEhlaWdodCwgdmlld1BvcnRIZWlnaHQpO1xuICAgIH1cblxuICAgIGlmIChjb2xsaXNpb25zLmhvcml6b250YWwgPT09IGNvbGxpc2lvbi5maXQpIHtcbiAgICAgICAgbGVmdCArPSBmaXQoZWxlbWVudExlZnQsIGVsZW1lbnRXaWR0aCwgdmlld1BvcnRXaWR0aCk7XG4gICAgfVxuXG4gICAgaWYgKGlzVmVydGljYWxGbGlwKSB7XG4gICAgICAgIHRvcCArPSBmbGlwKHtcbiAgICAgICAgICAgIG9mZnNldDogZWxlbWVudFRvcCxcbiAgICAgICAgICAgIHNpemU6IGVsZW1lbnRIZWlnaHQsXG4gICAgICAgICAgICBhbmNob3JTaXplOiBhbmNob3JSZWN0LmhlaWdodCxcbiAgICAgICAgICAgIHZpZXdQb3J0U2l6ZTogdmlld1BvcnRIZWlnaHQsXG4gICAgICAgICAgICBhbmNob3JBbGlnblBvaW50OiBhbmNob3JBbGlnbi52ZXJ0aWNhbCxcbiAgICAgICAgICAgIGVsZW1lbnRBbGlnblBvaW50OiBlbGVtZW50QWxpZ24udmVydGljYWxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGlzSG9yaXpvbnRhbEZsaXApIHtcbiAgICAgICAgbGVmdCArPSBmbGlwKHtcbiAgICAgICAgICAgIG9mZnNldDogZWxlbWVudExlZnQsXG4gICAgICAgICAgICBzaXplOiBlbGVtZW50V2lkdGgsXG4gICAgICAgICAgICBhbmNob3JTaXplOiBhbmNob3JSZWN0LndpZHRoLFxuICAgICAgICAgICAgdmlld1BvcnRTaXplOiB2aWV3UG9ydFdpZHRoLFxuICAgICAgICAgICAgYW5jaG9yQWxpZ25Qb2ludDogYW5jaG9yQWxpZ24uaG9yaXpvbnRhbCxcbiAgICAgICAgICAgIGVsZW1lbnRBbGlnblBvaW50OiBlbGVtZW50QWxpZ24uaG9yaXpvbnRhbFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBmbGlwcGVkOiAoaXNIb3Jpem9udGFsRmxpcCAmJiBsZWZ0ICE9PSAwKSB8fCAoaXNWZXJ0aWNhbEZsaXAgJiYgdG9wICE9PSAwKSxcbiAgICAgICAgb2Zmc2V0OiB7XG4gICAgICAgICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgICAgICAgdG9wOiB0b3BcbiAgICAgICAgfVxuICAgIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCByZXN0cmljdFRvVmlldztcbiIsImV4cG9ydCBkZWZhdWx0IChlbGVtZW50KSA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG5cbiAgICBsZXQgc2libGluZyA9IGVsZW1lbnQucGFyZW50Tm9kZS5maXJzdEVsZW1lbnRDaGlsZDtcblxuICAgIHdoaWxlIChzaWJsaW5nKSB7XG4gICAgICAgIGlmIChzaWJsaW5nICE9PSBlbGVtZW50KSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChzaWJsaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNpYmxpbmcgPSBzaWJsaW5nLm5leHRFbGVtZW50U2libGluZztcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuaW1wb3J0IHBhcmVudHMgZnJvbSAnLi9wYXJlbnRzJztcbmltcG9ydCBzaWJsaW5ncyBmcm9tICcuL3NpYmxpbmdzJztcblxuZXhwb3J0IGRlZmF1bHQgKGFuY2hvciwgY29udGFpbmVyKSA9PiB7XG4gICAgY29uc3QgcGFyZW50RWxlbWVudHMgPSBwYXJlbnRzKGFuY2hvcik7XG4gICAgbGV0IGNvbnRhaW5lckVsZW1lbnQgPSBjb250YWluZXI7XG4gICAgbGV0IHNpYmxpbmdFbGVtZW50cztcbiAgICBsZXQgcmVzdWx0O1xuXG4gICAgd2hpbGUgKGNvbnRhaW5lckVsZW1lbnQpIHtcbiAgICAgICAgc2libGluZ0VsZW1lbnRzID0gc2libGluZ3MoY29udGFpbmVyRWxlbWVudCk7XG5cbiAgICAgICAgcmVzdWx0ID0gcGFyZW50RWxlbWVudHMucmVkdWNlKFxuICAgICAgICAgICAgKGxpc3QsIHApID0+IGxpc3QuY29uY2F0KHNpYmxpbmdFbGVtZW50cy5maWx0ZXIocyA9PiBzID09PSBwKSksXG4gICAgICAgICAgICBbXVxuICAgICAgICApWzBdO1xuXG4gICAgICAgIGlmIChyZXN1bHQpIHsgYnJlYWs7IH1cblxuICAgICAgICBjb250YWluZXJFbGVtZW50ID0gY29udGFpbmVyRWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG4iLCJpbXBvcnQgd25kIGZyb20gJy4vd2luZG93JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gd2luZG93Vmlld3BvcnQoZWxlbWVudCkge1xuICAgIGNvbnN0IHdpbiA9IHduZChlbGVtZW50KTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGhlaWdodDogd2luLmlubmVySGVpZ2h0LFxuICAgICAgICB3aWR0aDogd2luLmlubmVyV2lkdGhcbiAgICB9O1xufVxuIl0sIm5hbWVzIjpbImNvbnN0IiwibGV0IiwicG9pbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJkb2NFbGVtZW50Iiwid25kIiwib2Zmc2V0Iiwib2Zm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