/* tslint:disable:member-ordering */
import { ChangeDetectionStrategy, Component, ElementRef, HostBinding, HostListener, Input, ContentChild, Output, EventEmitter } from '@angular/core';
import { NodeTemplateDirective } from './node-template.directive';
import { FocusStateService } from './focus-state.service';
import { ExpandStateService } from './expand-state.service';
import { IndexBuilderService } from './index-builder.service';
import { LoadingNotificationService } from './loading-notification.service';
import { NodeChildrenService } from './node-children.service';
import { NavigationService } from './navigation/navigation.service';
import { SelectionService } from './selection/selection.service';
import { TreeViewLookupService } from './treeview-lookup.service';
import { closestNode, focusableNode, isDocumentAvailable, nodeId } from './utils';
import { hasChildren, isChecked, isDisabled, isExpanded, isSelected } from './default-callbacks';
import { Subscription } from 'rxjs/Subscription';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { auditTime } from 'rxjs/operators/auditTime';
import { of } from 'rxjs/observable/of';
const isExpandIcon = (target) => (/k-i-collapse|k-i-expand/.test(target.className));
const providers = [
    FocusStateService,
    ExpandStateService,
    IndexBuilderService,
    TreeViewLookupService,
    LoadingNotificationService,
    NodeChildrenService,
    NavigationService,
    SelectionService
];
/**
 * Represents the Kendo UI TreeView component for Angular.
 *
 * @example
 * {% meta height:350 %}
 * ```ts-preview
 * import { Component } from '@angular/core';
 *
 *  _@Component({
 *      selector: 'my-app',
 *      template: `
 *      <kendo-treeview
 *          [nodes]="data"
 *          textField="text"
 *          kendoTreeViewCheckable
 *          kendoTreeViewExpandable
 *          kendoTreeViewSelectable
 *
 *          kendoTreeViewHierarchyBinding
 *          childrenField="items">
 *      </kendo-treeview>
 *  `
 *  })
 *  export class AppComponent {
 *      public data: any[] = [
 *          {
 *              text: "Furniture", items: [
 *                  { text: "Tables & Chairs" },
 *                  { text: "Sofas" },
 *                  { text: "Occasional Furniture" }
 *              ]
 *          },
 *          {
 *              text: "Decor", items: [
 *                  { text: "Bed Linen" },
 *                  { text: "Curtains & Blinds" },
 *                  { text: "Carpets" }
 *              ]
 *          }
 *      ];
 *  }
 * ```
 * {% endmeta %}
 */
export class TreeViewComponent {
    constructor(focusService, expandService, navigationService, nodeChildrenService, selectionService, treeViewLookupService, element) {
        this.focusService = focusService;
        this.expandService = expandService;
        this.navigationService = navigationService;
        this.nodeChildrenService = nodeChildrenService;
        this.selectionService = selectionService;
        this.treeViewLookupService = treeViewLookupService;
        this.element = element;
        this.classNames = true;
        /**
         * Fires when the children of the expanded node are loaded.
         */
        this.childrenLoaded = new EventEmitter();
        /**
         * Fires when the user blurs the component.
         */
        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires when the user focuses the component.
         */
        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires when the user expands a TreeView node.
         */
        this.expand = new EventEmitter();
        /**
         * Fires when the user collapses a TreeView node.
         */
        this.collapse = new EventEmitter();
        /**
         * Fires when the user selects a TreeView node checkbox.
         */
        this.checkedChange = new EventEmitter();
        /**
         * Fires when the user selects a TreeView node.
         */
        this.selectionChange = new EventEmitter();
        /**
         * A function which determines if a specific node is disabled.
         */
        this.isDisabled = isDisabled;
        /**
         * Determines whether the TreeView keyboard navigable is enabled.
         */
        this.navigable = true;
        /**
         * A function which provides the child nodes for a given parent node.
         */
        this.children = () => of([]);
        this.checkboxes = false;
        this.expandIcons = false;
        this.isActive = false;
        this.data = new BehaviorSubject([]);
        this._animate = true;
        this.resolvedPromise = Promise.resolve(null);
        this.subscriptions = new Subscription(() => { });
    }
    get role() { return 'tree'; }
    /**
     * Determines whether the content animation is enabled.
     */
    set animate(value) {
        this._animate = value;
    }
    get animate() {
        return !this._animate;
    }
    /**
     * The nodes which will be displayed by the TreeView.
     */
    set nodes(value) {
        this.data.next(value);
    }
    /**
     * A function which determines if a specific node has child nodes.
     */
    get hasChildren() {
        return this._hasChildren || hasChildren;
    }
    set hasChildren(callback) {
        this._hasChildren = callback;
        this.expandIcons = Boolean(this._isExpanded && this._hasChildren);
    }
    /**
     * A function which determines if a specific node is selected.
     */
    get isChecked() {
        return this._isChecked || isChecked;
    }
    set isChecked(callback) {
        this._isChecked = callback;
        this.checkboxes = Boolean(this._isChecked);
    }
    /**
     * A function which determines if a specific node is expanded.
     */
    get isExpanded() {
        return this._isExpanded || isExpanded;
    }
    set isExpanded(callback) {
        this._isExpanded = callback;
        this.expandIcons = Boolean(this._isExpanded && this._hasChildren);
    }
    /**
     * A function which determines if a specific node is selected.
     */
    get isSelected() {
        return this._isSelected || isSelected;
    }
    set isSelected(callback) {
        this._isSelected = callback;
    }
    /**
     * @hidden
     */
    handleKeydown(args) {
        if (!this.isActive) {
            return;
        }
        this.navigationService.move(args);
    }
    /**
     * @hidden
     */
    handleClick({ target }) {
        const index = nodeId(closestNode(target));
        if (!index || this.focusService.hasActiveContent()) {
            return;
        }
        this.focusin(index)
            .then(() => {
            if (!this.isActive || isExpandIcon(target)) {
                return;
            }
            this.navigationService.selectIndex(index);
        });
    }
    ngOnChanges(_) {
        this.navigationService.navigable = Boolean(this.navigable);
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    ngOnInit() {
        this.subscriptions.add(this.nodeChildrenService
            .changes
            .subscribe((x) => this.childrenLoaded.emit(x)));
        this.subscriptions.add(this.focusService.changes
            .pipe(auditTime(1))
            .subscribe(({ focused, index }) => focused
            ? this.focusin(index)
            : this.focusout(index)));
        this.subscriptions.add(this.expandService.changes
            .subscribe(({ index, dataItem, expand }) => expand
            ? this.expand.emit({ index, dataItem })
            : this.collapse.emit({ index, dataItem })));
        this.subscriptions.add(this.navigationService.checks
            .subscribe((x) => this.checkedChange.emit(this.treeViewLookupService.itemLookup(x))));
        this.subscriptions.add(this.selectionService.changes
            .subscribe((x) => this.selectionChange.emit(x)));
    }
    /**
     * Blurs the focused TreeView item.
     */
    blur() {
        if (!isDocumentAvailable()) {
            return;
        }
        const target = focusableNode(this.element);
        if (document.activeElement === target) {
            target.blur();
        }
    }
    /**
     * Focuses the first focusable item in the TreeView component if no hierarchical index is provided.
     *
     * @example
     * ```ts
     * import { Component } from '@angular/core';
     *
     *  @Component({
     *      selector: 'my-app',
     *      template: `
     *      <button (click)="treeview.focus('1')">Focuses the second node</button>
     *      <kendo-treeview
     *          #treeview
     *          [nodes]="data"
     *          textField="text"
     *      >
     *      </kendo-treeview>
     *  `
     *  })
     *  export class AppComponent {
     *      public data: any[] = [
     *          { text: "Furniture" },
     *          { text: "Decor" }
     *      ];
     *  }
     * ```
     */
    focus(index) {
        this.navigationService.activateIndex(index);
        const target = focusableNode(this.element);
        if (target) {
            target.focus();
        }
    }
    focusin(index) {
        if (!index) {
            return;
        }
        this.navigationService.activateIndex(index);
        return this.resolvedPromise.then(() => {
            if (!this.isActive && this.navigationService.isActive(index)) {
                this.isActive = true;
                this.onFocus.emit();
            }
        });
    }
    focusout(index) {
        return this.resolvedPromise.then(() => {
            if (this.isActive && this.navigationService.isActive(index)) {
                this.navigationService.deactivate();
                this.isActive = false;
                this.onBlur.emit();
            }
        });
    }
}
TreeViewComponent.decorators = [
    { type: Component, args: [{
                changeDetection: ChangeDetectionStrategy.Default,
                exportAs: 'kendoTreeView',
                providers: providers,
                selector: 'kendo-treeview',
                template: `
    <ul class="k-treeview-lines"
      kendoTreeViewGroup
      role="group"
      [checkboxes]="checkboxes"
      [expandIcons]="expandIcons"
      [children]="children"
      [hasChildren]="hasChildren"
      [isChecked]="isChecked"
      [isDisabled]="isDisabled"
      [isExpanded]="isExpanded"
      [isSelected]="isSelected"
      [nodeTemplateRef]="nodeTemplate?.templateRef"
      [nodes]="data"
      [textField]="textField"
      >
    </ul>
  `
            },] },
];
/** @nocollapse */
TreeViewComponent.ctorParameters = () => [
    { type: FocusStateService, },
    { type: ExpandStateService, },
    { type: NavigationService, },
    { type: NodeChildrenService, },
    { type: SelectionService, },
    { type: TreeViewLookupService, },
    { type: ElementRef, },
];
TreeViewComponent.propDecorators = {
    'classNames': [{ type: HostBinding, args: ["class.k-widget",] }, { type: HostBinding, args: ["class.k-treeview",] },],
    'role': [{ type: HostBinding, args: ["attr.role",] },],
    'animate': [{ type: Input }, { type: HostBinding, args: ['@.disabled',] },],
    'childrenLoaded': [{ type: Output },],
    'onBlur': [{ type: Output, args: ['blur',] },],
    'onFocus': [{ type: Output, args: ['focus',] },],
    'expand': [{ type: Output },],
    'collapse': [{ type: Output },],
    'checkedChange': [{ type: Output },],
    'selectionChange': [{ type: Output },],
    'nodeTemplate': [{ type: ContentChild, args: [NodeTemplateDirective,] },],
    'nodes': [{ type: Input },],
    'textField': [{ type: Input },],
    'hasChildren': [{ type: Input },],
    'isChecked': [{ type: Input },],
    'isDisabled': [{ type: Input },],
    'isExpanded': [{ type: Input },],
    'isSelected': [{ type: Input },],
    'navigable': [{ type: Input },],
    'children': [{ type: Input },],
    'handleKeydown': [{ type: HostListener, args: ['keydown', ['$event'],] },],
    'handleClick': [{ type: HostListener, args: ['click', ['$event'],] },],
};
