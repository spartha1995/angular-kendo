const closest = (element, selector) => {
    if (element.closest) {
        return element.closest(selector);
    }
    const matches = (element.document || element.ownerDocument).querySelectorAll(selector);
    let node = element;
    let i = 0;
    do {
        i = matches.length - 1;
        while (i >= 0 && matches.item(i) !== node) {
            i -= 1;
        }
        if (i < 0) {
            break;
        }
        node = node.parentElement;
    } while (node);
    return node;
};
const createRipple = doc => {
    const ripple = doc.createElement('div');
    ripple.className = 'k-ripple';
    const blob = doc.createElement('div');
    blob.className = 'k-ripple-blob';
    ripple.appendChild(blob);
    return [ripple, blob];
};
const once = (element, eventName, fn) => {
    const listener = () => {
        fn();
        element.removeEventListener(eventName, listener, false);
    };
    const remove = () => element.addEventListener(eventName, listener, false);
    remove();
    return { remove };
};
const activate = (containerSelector, options) => e => {
    const target = e.target;
    const doc = target.document || target.ownerDocument;
    let container;
    if (options.container) {
        container = options.container(target);
    }
    else {
        container = closest(target, containerSelector);
    }
    if (!container) {
        return;
    }
    // focus event of ripple container triggers double-focus
    const doubleFocus = /focus/i.test(e.type) && container.classList.contains("k-ripple-target");
    if (doubleFocus) {
        return;
    }
    // suppress focus when animating ripples
    container.classList.add("k-ripple-target");
    const [ripple, blob] = createRipple(doc);
    const state = {
        animated: false,
        released: false,
        blob,
        container,
        ripple
    };
    const eventType = {
        'focusin': 'focusout',
        'keydown': 'keyup',
        'mousedown': 'mouseup',
        'pointerdown': 'pointerup',
        'touchdown': 'touchup'
    }[e.type];
    once(e.currentTarget, eventType, () => release(state));
    container.appendChild(ripple);
    // recalc to allow the effect to animate
    window.getComputedStyle(ripple).getPropertyValue('opacity');
    const rect = container.getBoundingClientRect();
    let left = 0;
    let top = 0;
    if ((/mouse|pointer|touch/).test(e.type)) {
        left = e.clientX - rect.left;
        top = e.clientY - rect.top;
    }
    else {
        left = rect.width / 2;
        top = rect.height / 2;
    }
    // coordinates of the farthest corner
    const xMax = left < rect.width / 2 ? rect.width : 0;
    const yMax = top < rect.height / 2 ? rect.height : 0;
    // distance to the farthest corner
    const dx = left - xMax;
    const dy = top - yMax;
    // blob size is twice the blob radius
    const size = 2 * Math.sqrt(dx * dx + dy * dy);
    const duration = 500;
    blob.style.cssText = `
    transform: translate(-50%, -50%) scale(1);
    width: ${size}px;
    height: ${size}px;
    left: ${left}px;
    top: ${top}px;
  `;
    setTimeout(() => finishAnimation(state), duration);
};
const finishAnimation = (state) => {
    state.animated = true;
    deactivate(state);
};
const release = (state) => {
    state.released = true;
    deactivate(state);
};
const deactivate = (state) => {
    // deactivation happens when both
    // - the activation event has been released (release)
    // - the ripple has finished animating (finishAnimation)
    if (!state.released || !state.animated) {
        return;
    }
    const { blob, ripple, container } = state;
    if (container) {
        once(container, 'blur', () => container.classList.remove("k-ripple-target"));
    }
    if (blob) {
        once(blob, 'transitionend', () => {
            if (ripple && ripple.parentNode) {
                ripple.parentNode.removeChild(ripple);
            }
        });
        blob.style.transition = 'opacity 200ms linear';
        blob.style.opacity = '0';
    }
};
/**
 * @hidden
 */
export const register = (root, elements) => {
    const flatten = arr => [].concat.apply([], arr);
    const handlers = flatten(elements.map((item) => {
        const defaultOptions = {
            global: false,
            events: ['mousedown', 'touchdown']
        };
        const { selector, options = defaultOptions } = item;
        const activator = activate(selector, options);
        const events = options.events || defaultOptions.events;
        const container = options.global ? document.body : root;
        events.forEach(evt => container.addEventListener(evt, activator, false));
        return { events, activator };
    }));
    return () => {
        if (!root) {
            return;
        }
        handlers.forEach(({ events, activator }) => events.forEach(evt => root.removeEventListener(evt, activator, false)));
        root = null;
    };
};
