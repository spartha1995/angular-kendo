import * as tslib_1 from "tslib";
/* tslint:disable:max-line-length */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { TagTemplateDirective } from './templates/tag-template.directive';
import { GroupTagTemplateDirective } from './templates/group-tag-template.directive';
/**
 * @hidden
 */
let TagListComponent = class TagListComponent {
    /**
     * @hidden
     */
    constructor() {
        this.removeTag = new EventEmitter();
    }
    tagText(tag) {
        return tag[this.textField] ? tag[this.textField] : tag;
    }
    deleteTag(event, tag) {
        event.preventDefault();
        event.stopImmediatePropagation();
        if (!this.disabled && event.which === 1) {
            this.removeTag.emit(tag);
        }
    }
    itemId(focused, index) {
        return focused === index ? this.activeId : undefined;
    }
    isGroupTag(tag) {
        return tag instanceof Array;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], TagListComponent.prototype, "tags", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], TagListComponent.prototype, "textField", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], TagListComponent.prototype, "focused", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", TagTemplateDirective)
], TagListComponent.prototype, "template", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", GroupTagTemplateDirective)
], TagListComponent.prototype, "groupTemplate", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], TagListComponent.prototype, "disabled", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], TagListComponent.prototype, "activeId", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], TagListComponent.prototype, "removeTag", void 0);
TagListComponent = tslib_1.__decorate([
    Component({
        selector: 'kendo-taglist',
        template: `
        <ul role="listbox" class="k-reset">
            <li *ngFor="let tag of tags; let i = index;"
                [ngClass]="{'k-button': true, 'k-state-focused': i === focused }"
                [attr.id]="itemId(focused, i)"
            >
                <ng-template *ngIf="isGroupTag(tag); then groupTag else singleTag"></ng-template>
                    <ng-template #groupTag>
                        <span>
                            <ng-template *ngIf="groupTemplate"
                                [templateContext]="{
                                templateRef: groupTemplate.templateRef,
                                $implicit: tag
                            }">
                            </ng-template>
                            <ng-template [ngIf]="!groupTemplate">{{ tag.length }} {{ tag.length === 1 ? 'item' : 'items' }} selected</ng-template>
                        </span>
                    </ng-template>
                    <ng-template #singleTag>
                        <span>
                            <ng-template *ngIf="template"
                                [templateContext]="{
                                templateRef: template.templateRef,
                                $implicit: tag
                            }">
                            </ng-template>
                            <ng-template [ngIf]="!template">{{ tagText(tag) }}</ng-template>
                        </span>
                    </ng-template>

                <span aria-label="delete" class="k-select">
                    <span class="k-icon k-i-close" (mousedown)="deleteTag($event, tag)">
                    </span>
                </span>
            </li>
        </ul>
  `
    })
], TagListComponent);
export { TagListComponent };
