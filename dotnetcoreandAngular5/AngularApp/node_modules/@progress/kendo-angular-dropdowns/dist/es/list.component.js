import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter, ViewChildren, QueryList, ElementRef, ViewChild } from '@angular/core';
import { ListItemDirective } from './list-item.directive';
import { ItemTemplateDirective } from './templates/item-template.directive';
import { isPresent, getter } from './util';
import { SelectionService } from './selection.service';
import { map } from 'rxjs/operators/map';
import { merge } from 'rxjs/operators/merge';
/**
 * @hidden
 */
var ListComponent = /** @class */ (function () {
    function ListComponent(selectionService) {
        this.data = [];
        this.selected = [];
        this.focused = -1;
        this.multipleSelection = false;
        this.onClick = new EventEmitter();
        this.selectionService = selectionService;
        this.scrollSubscription = this.selectionService
            .onSelect.pipe(map(function (args) { return args.indices[0]; }), merge(this.selectionService.onFocus))
            .subscribe(this.scrollToItem.bind(this));
    }
    ListComponent.prototype.ngAfterViewInit = function () {
        if (this.show === true) {
            this.scrollToItem(this.selectionService.focused);
        }
    };
    ListComponent.prototype.ngOnDestroy = function () {
        this.scrollSubscription.unsubscribe();
    };
    ListComponent.prototype.setContainerClasses = function () {
        return {
            'k-list-scroller': true
        };
    };
    ListComponent.prototype.getHeight = function () {
        return this.height + "px";
    };
    ListComponent.prototype.getText = function (dataItem) {
        return getter(dataItem, this.textField);
    };
    ListComponent.prototype.getValue = function (dataItem) {
        return getter(dataItem, this.valueField);
    };
    ListComponent.prototype.scrollToItem = function (index) {
        var items = this.items.toArray();
        if (isPresent(items[index]) && index !== -1) {
            this.scroll(items[index].element);
        }
    };
    ListComponent.prototype.scroll = function (item) {
        if (!item) {
            return;
        }
        var nativeElement = item.nativeElement;
        var content = this.content.nativeElement, itemOffsetTop = nativeElement.offsetTop, itemOffsetHeight = nativeElement.offsetHeight, contentScrollTop = content.scrollTop, contentOffsetHeight = content.clientHeight, bottomDistance = itemOffsetTop + itemOffsetHeight;
        if (contentScrollTop > itemOffsetTop) {
            contentScrollTop = itemOffsetTop;
        }
        else if (bottomDistance > (contentScrollTop + contentOffsetHeight)) {
            contentScrollTop = (bottomDistance - contentOffsetHeight);
        }
        content.scrollTop = contentScrollTop;
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Array)
    ], ListComponent.prototype, "data", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Array)
    ], ListComponent.prototype, "selected", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], ListComponent.prototype, "focused", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], ListComponent.prototype, "textField", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], ListComponent.prototype, "valueField", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], ListComponent.prototype, "height", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", ItemTemplateDirective)
    ], ListComponent.prototype, "template", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], ListComponent.prototype, "show", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], ListComponent.prototype, "id", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], ListComponent.prototype, "optionPrefix", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], ListComponent.prototype, "multipleSelection", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], ListComponent.prototype, "onClick", void 0);
    tslib_1.__decorate([
        ViewChildren(ListItemDirective),
        tslib_1.__metadata("design:type", QueryList)
    ], ListComponent.prototype, "items", void 0);
    tslib_1.__decorate([
        ViewChild('content'),
        tslib_1.__metadata("design:type", ElementRef)
    ], ListComponent.prototype, "content", void 0);
    ListComponent = tslib_1.__decorate([
        Component({
            selector: 'kendo-list',
            template: "\n    <div #content [ngClass]=\"setContainerClasses()\" [style.maxHeight]=\"getHeight()\" unselectable=\"on\">\n    <ul role=\"listbox\" [attr.id]=\"id\" [attr.aria-hidden]=\"!show\" [ngClass]=\"{ 'k-list': true, 'k-reset': true }\">\n        <li role=\"option\"\n            *ngFor=\"let dataItem of data; let index = index\"\n            kendoDropDownsSelectable\n            [index]=\"index\"\n            [multipleSelection]=\"multipleSelection\"\n            [attr.id]=\"optionPrefix + '-' + getValue(dataItem)\"\n            [attr.tabIndex]=\"-1\"\n            [ngClass]=\"{'k-item': true}\">\n            <ng-template *ngIf=\"template\"\n                [templateContext]=\"{\n                    templateRef: template.templateRef,\n                    $implicit: dataItem\n                }\">\n            </ng-template>\n            <ng-template [ngIf]=\"!template\">{{ getText(dataItem) }}</ng-template>\n        </li>\n    </ul>\n    </div>\n  "
        }),
        tslib_1.__metadata("design:paramtypes", [SelectionService])
    ], ListComponent);
    return ListComponent;
}());
export { ListComponent };
