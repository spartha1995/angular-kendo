import * as tslib_1 from "tslib";
import { Directive, ElementRef, HostBinding, Inject, Input, Optional, Renderer2 } from '@angular/core';
import { ColumnInfoService } from '../common/column-info.service';
import { IdService } from '../common/id.service';
import { CELL_CONTEXT } from '../rendering/common/cell-context';
import { FocusGroup } from './focus-group';
import { FocusRoot } from './focus-root';
import { NavigationService } from './navigation.service';
/**
 * @hidden
 */
export function WhenEnabled() {
    return function (target, propertyKey) {
        var method = target[propertyKey];
        target[propertyKey] = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (target.navigationService.enabled) {
                method.apply(target, args);
            }
        };
    };
}
/**
 * @hidden
 */
var LogicalCellDirective = /** @class */ (function () {
    function LogicalCellDirective(focusGroup, element, columnInfoService, idService, navigationService, renderer, cellContext) {
        this.focusGroup = focusGroup;
        this.element = element;
        this.columnInfoService = columnInfoService;
        this.idService = idService;
        this.navigationService = navigationService;
        this.renderer = renderer;
        this.cellContext = cellContext;
        this.logicalSlaveCell = false;
    }
    Object.defineProperty(LogicalCellDirective.prototype, "id", {
        get: function () {
            if (!this.logicalSlaveCell && this.columnInfoService.isLocked) {
                return this.idService.cellId(this.logicalRowIndex, this.logicalColIndex);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogicalCellDirective.prototype, "ariaColIndex", {
        get: function () {
            if (this.logicalSlaveCell) {
                return undefined;
            }
            return this.logicalColIndex + 1;
        },
        enumerable: true,
        configurable: true
    });
    LogicalCellDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.register();
        this.updateElement();
        this.navigationChange = this.navigationService.changes.subscribe(function (e) { return _this.onNavigationChange(e); });
    };
    LogicalCellDirective.prototype.ngDoCheck = function () {
        if (this.cellContext) {
            this.cellContext.focusGroup = this.focusGroup;
        }
    };
    LogicalCellDirective.prototype.ngOnChanges = function (changes) {
        var rowIndexChanged = changes.logicalRowIndex && !changes.logicalRowIndex.firstChange;
        var colIndexChanged = changes.logicalColIndex && !changes.logicalColIndex.firstChange;
        if (rowIndexChanged || colIndexChanged) {
            this.register();
            this.updateElement();
        }
    };
    LogicalCellDirective.prototype.ngOnDestroy = function () {
        if (this.navigationChange) {
            this.navigationChange.unsubscribe();
        }
    };
    LogicalCellDirective.prototype.onNavigationChange = function (e) {
        var active = this.logicalColIndex === e.colIndex && this.logicalRowIndex === e.rowIndex;
        var wasActive = this.logicalColIndex === e.prevColIndex && this.logicalRowIndex === e.prevRowIndex;
        if (active || wasActive) {
            this.updateElement();
        }
    };
    LogicalCellDirective.prototype.updateElement = function () {
        var el = this.element.nativeElement;
        this.renderer.setAttribute(el, 'tabIndex', this.isFocusable() ? '0' : '-1');
        if (this.isFocused()) {
            if (this.focusGroup.isNavigable()) {
                this.focusGroup.focus();
            }
            else {
                el.focus();
                this.renderer.addClass(el, 'k-state-focused');
            }
        }
        else {
            this.renderer.removeClass(el, 'k-state-focused');
        }
    };
    LogicalCellDirective.prototype.register = function () {
        if (!this.logicalSlaveCell) {
            this.navigationService.registerCell(this);
        }
    };
    LogicalCellDirective.prototype.isFocusable = function () {
        return this.navigationService.isCellFocusable(this);
    };
    LogicalCellDirective.prototype.isFocused = function () {
        return this.navigationService.isCellFocused(this);
    };
    LogicalCellDirective.decorators = [
        { type: Directive, args: [{
                    providers: [{
                            provide: FocusGroup,
                            deps: [FocusRoot],
                            useClass: FocusGroup
                        }],
                    selector: '[kendoGridLogicalCell]'
                },] },
    ];
    /** @nocollapse */
    LogicalCellDirective.ctorParameters = function () { return [
        { type: FocusGroup, },
        { type: ElementRef, },
        { type: ColumnInfoService, },
        { type: IdService, },
        { type: NavigationService, },
        { type: Renderer2, },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CELL_CONTEXT,] },] },
    ]; };
    LogicalCellDirective.propDecorators = {
        'logicalColIndex': [{ type: Input },],
        'logicalRowIndex': [{ type: Input },],
        'logicalSlaveCell': [{ type: Input },],
        'colSpan': [{ type: Input },],
        'rowSpan': [{ type: Input },],
        'groupItem': [{ type: Input },],
        'id': [{ type: HostBinding, args: ['attr.id',] },],
        'ariaColIndex': [{ type: HostBinding, args: ['attr.aria-colindex',] },],
    };
    tslib_1.__decorate([
        WhenEnabled(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], LogicalCellDirective.prototype, "ngOnInit", null);
    tslib_1.__decorate([
        WhenEnabled(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], LogicalCellDirective.prototype, "ngDoCheck", null);
    tslib_1.__decorate([
        WhenEnabled(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], LogicalCellDirective.prototype, "ngOnChanges", null);
    return LogicalCellDirective;
}());
export { LogicalCellDirective };
