import * as tslib_1 from "tslib";
/* tslint:disable:component-selector-name  component-selector */
import { Component, ChangeDetectionStrategy, EventEmitter, Input, Output, TemplateRef } from '@angular/core';
import { CalendarViewEnum } from './models/view.enum';
import { BusViewService } from './services/bus-view.service';
import { IntlService } from '@progress/kendo-angular-intl';
import { cloneDate, isEqual, weekInYear } from '@progress/kendo-date-math';
import { getToday, setTime, stringifyClassObject } from '../util';
/**
 * @hidden
 */
let ViewComponent = class ViewComponent {
    constructor(bus, intl) {
        this.bus = bus;
        this.intl = intl;
        this.isActive = true;
        this.change = new EventEmitter();
        this.colSpan = 0;
        this.today = getToday();
    }
    get weekNumber() {
        return this.showWeekNumbers && this.activeView === CalendarViewEnum.month;
    }
    set weekNumber(showWeekNumbers) {
        this.showWeekNumbers = showWeekNumbers;
    }
    ngOnChanges(_) {
        this.service = this.bus.service(this.activeView);
        if (!this.service) {
            return;
        }
        this.colSpan = this.service.rowLength(this.weekNumber);
        this.title = this.service.title(this.viewDate);
        const time = this.selectedDate || this.today;
        const viewDate = setTime(this.viewDate, time);
        this.data = this.service.data({
            cellUID: this.cellUID,
            focusedDate: this.focusedDate,
            isActiveView: !this.bus.canMoveDown(this.activeView),
            max: this.max,
            min: this.min,
            selectedDate: this.selectedDate,
            viewDate: viewDate
        });
    }
    handleClick(ctx) {
        this.change.emit(ctx.value);
    }
    firstDate(rowCtx) {
        const ctx = this.firstWeekDateContext(rowCtx);
        return ctx ? ctx.value : null;
    }
    getWeekNumber(date) {
        if (!this.weekNumber) {
            return null;
        }
        return weekInYear(date, this.intl.firstDay());
    }
    getWeekNumberContext(rowCtx) {
        const ctx = this.firstWeekDateContext(rowCtx);
        if (!this.weekNumber || !ctx) {
            return null;
        }
        const weekNumber = weekInYear(ctx.value, this.intl.firstDay()).toString();
        return {
            formattedValue: weekNumber,
            id: null,
            isFocused: false,
            isSelected: false,
            isWeekend: false,
            title: weekNumber,
            value: cloneDate(ctx.value)
        };
    }
    getStyles(context) {
        return stringifyClassObject({
            'k-state-focused': this.isActive && context.isFocused,
            'k-state-selected': context.isSelected,
            'k-today': isEqual(context.value, this.today),
            'k-weekend': context.isWeekend
        });
    }
    firstWeekDateContext(rowCtx) {
        if (!this.weekNumber) {
            return null;
        }
        let idx = 0;
        let ctx = rowCtx[idx];
        while (!ctx && idx < rowCtx.length) {
            ctx = rowCtx[++idx];
        }
        return ctx;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], ViewComponent.prototype, "isActive", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], ViewComponent.prototype, "activeView", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], ViewComponent.prototype, "cellUID", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Date)
], ViewComponent.prototype, "focusedDate", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Date)
], ViewComponent.prototype, "selectedDate", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Date)
], ViewComponent.prototype, "viewDate", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Date)
], ViewComponent.prototype, "min", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Date)
], ViewComponent.prototype, "max", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], ViewComponent.prototype, "weekNumber", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], ViewComponent.prototype, "viewIndex", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", TemplateRef)
], ViewComponent.prototype, "templateRef", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", TemplateRef)
], ViewComponent.prototype, "weekNumberTemplateRef", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], ViewComponent.prototype, "change", void 0);
ViewComponent = tslib_1.__decorate([
    Component({
        changeDetection: ChangeDetectionStrategy.OnPush,
        selector: '[kendoCalendarView]',
        template: `
    <ng-template #emptyCell><td>&nbsp;</td></ng-template>
    <tr role="row"><th scope="col" [colSpan]="colSpan">{{title}}</th></tr>
    <tr *kFor="let row of data" role="row">
        <ng-template [ngIf]="weekNumber">
            <td class="k-alt" *ngIf="firstDate(row); else emptyCell">
                <ng-template [ngIf]="!weekNumberTemplateRef">
                    {{getWeekNumber(firstDate(row))}}
                </ng-template>
                <ng-template
                    [ngIf]="weekNumberTemplateRef"
                    [ngTemplateOutlet]="weekNumberTemplateRef"
                    [ngTemplateOutletContext]="{
                        $implicit: firstDate(row),
                        cellContext: getWeekNumberContext(row)
                    }"
                ></ng-template>
            </td>
        </ng-template>
        <ng-template kFor [kForOf]="row" let-cell>
            <td *ngIf="cell; else emptyCell"
                role="gridcell" [attr.id]="cell.id" [attr.aria-selected]="cell.isSelected"
                [ngClass]="getStyles(cell)" [title]="cell.title" (click)="handleClick(cell)"
            >
                <span class="k-link">
                    <ng-template [ngIf]="!templateRef">{{cell.formattedValue}}</ng-template>
                    <ng-template
                        [ngIf]="templateRef"
                        [ngTemplateOutlet]="templateRef"
                        [ngTemplateOutletContext]="{ $implicit: cell.value, cellContext: cell }"
                    ></ng-template>
                </span>
            </td>
        </ng-template>
    </tr>
  `
    }),
    tslib_1.__metadata("design:paramtypes", [BusViewService, IntlService])
], ViewComponent);
export { ViewComponent };
