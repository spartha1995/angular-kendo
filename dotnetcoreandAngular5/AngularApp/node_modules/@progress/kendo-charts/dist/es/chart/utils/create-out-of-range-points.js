import { INTERPOLATE, ZERO } from '../constants';
import { convertableToNumber } from '../../common';
import SeriesBinder from '../series-binder';

var AREA_REGEX = /area/i;

function seriesMissingValues(series) {
    if (series.missingValues) {
        return series.missingValues;
    }

    return AREA_REGEX.test(series.type) || series.stack ? ZERO : INTERPOLATE;
}

function hasValue(series, item) {
    var fields = SeriesBinder.current.bindPoint(series, null, item);
    var valueFields = fields.valueFields;

    for (var field in valueFields) {
        if (convertableToNumber(valueFields[field])) {
            return true;
        }
    }
}

export default function createOutOfRangePoints(series, range, count, getter) {
    var min = range.min;
    var max = range.max;
    var hasMinPoint = min > 0 && min < count;
    var hasMaxPoint = max + 1 < count;

    if (hasMinPoint || hasMaxPoint) {
        var missingValues = seriesMissingValues(series);
        var minPoint, maxPoint;
        if (missingValues !== INTERPOLATE) {
            if (hasMinPoint) {
                minPoint = getter(min - 1);
            }

            if (hasMaxPoint) {
                maxPoint = getter(max + 1);
            }
        } else {
            var outPoint, pointHasValue;
            var idx = min;

            if (hasMinPoint) {
                do {
                    idx--;
                    outPoint = getter(idx);
                    pointHasValue = hasValue(series, outPoint.item);
                } while (idx >= 0 && !pointHasValue);

                if (pointHasValue) {
                    minPoint = outPoint;
                }
                outPoint = null;
                pointHasValue = false;
            }

            if (hasMaxPoint) {
                idx = max;
                do {
                    idx++;
                    outPoint = getter(idx);
                    pointHasValue = hasValue(series, outPoint.item);
                } while (idx < count && !pointHasValue);

                if (pointHasValue) {
                    maxPoint = outPoint;
                }
            }
        }

        if (minPoint) {
            series._outOfRangeMinPoint = minPoint;
        }

        if (maxPoint) {
            series._outOfRangeMaxPoint = maxPoint;
        }
    }
}