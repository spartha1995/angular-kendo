"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var kendo_angular_l10n_1 = require("@progress/kendo-angular-l10n");
var splitter_pane_component_1 = require("./splitter-pane.component");
var splitter_service_1 = require("./splitter.service");
/**
 * Represents the Kendo UI Splitter component for Angular.
 *
 * ```ts-preview
 *
 *  @Component({
 *    selector: 'my-app',
 *    template: `
 *        <kendo-splitter style="height: 280px;">
 *
 *          <kendo-splitter-pane [collapsible]="true" size="30%">
 *            <h3>Inner splitter / left pane</h3>
 *            <p>Resizable and collapsible.</p>
 *          </kendo-splitter-pane>
 *
 *          <kendo-splitter-pane>
 *            <h3>Inner splitter / center pane</h3>
 *            <p>Resizable only.</p>
 *          </kendo-splitter-pane>
 *
 *          <kendo-splitter-pane [collapsible]="true" size="30%">
 *            <h3>Inner splitter / right pane</h3>
 *            <p>Resizable and collapsible.</p>
 *          </kendo-splitter-pane>
 *
 *        </kendo-splitter>
 *      `,
 *    styles: [ `
 *        h3 { font-size: 1.2em; }
 *        h3, p { margin: 10px; padding: 0; }
 *    ` ]
 *  })
 *  class AppComponent {}
 * ```
 */
var SplitterComponent = /** @class */ (function () {
    function SplitterComponent(element, splitterService, rtl, enclosingPane) {
        var _this = this;
        this.element = element;
        this.splitterService = splitterService;
        /**
         * Specifies the orientation of the panes within the Splitter.
         * Panes in a horizontal Splitter are placed horizontally.
         * Panes in a vertical Splitter are placed vertically.
         */
        this.orientation = 'horizontal';
        /**
         * Fires after a Splitter pane is resized or collapsed.
         * Useful for triggering layout calculations on components
         * which are positioned inside the panes.
         */
        this.layoutChange = new core_1.EventEmitter();
        this.ariaRole = 'splitter';
        if (enclosingPane) {
            enclosingPane.containsSplitter = true;
        }
        this.splitterService.layoutChange.subscribe(function (e) { return _this.layoutChange.emit(e); });
        this.direction = rtl ? 'rtl' : 'ltr';
    }
    Object.defineProperty(SplitterComponent.prototype, "hostClasses", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SplitterComponent.prototype, "horizontalHostClasses", {
        get: function () {
            return this.orientation === 'horizontal';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SplitterComponent.prototype, "verticalHostClasses", {
        get: function () {
            return this.orientation === 'vertical';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SplitterComponent.prototype, "dir", {
        get: function () {
            return this.direction;
        },
        enumerable: true,
        configurable: true
    });
    SplitterComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        var reconfigure = function () {
            _this.splitterService.configure({
                panes: _this.panes.toArray(),
                orientation: _this.orientation,
                containerSize: function () {
                    if (_this.orientation === 'vertical') {
                        return _this.element.nativeElement.offsetHeight;
                    }
                    else {
                        return _this.element.nativeElement.offsetWidth;
                    }
                }
            });
        };
        reconfigure();
        this.panes.changes.subscribe(reconfigure);
    };
    SplitterComponent.decorators = [
        { type: core_1.Component, args: [{
                    exportAs: 'kendoSplitter',
                    selector: 'kendo-splitter',
                    providers: [splitter_service_1.SplitterService],
                    template: "\n      <ng-content select=\"kendo-splitter-pane\"></ng-content>\n      <ng-container *ngFor=\"\n        let pane of panes;\n        let index = index;\n        let last = last;\n      \">\n        <kendo-splitter-bar\n          kendoLayoutDraggable\n          *ngIf=\"!last\"\n          [index]=\"index\"\n          [orientation]=\"orientation\">\n        </kendo-splitter-bar>\n      </ng-container>\n    "
                },] },
    ];
    /** @nocollapse */
    SplitterComponent.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
        { type: splitter_service_1.SplitterService, },
        { type: undefined, decorators: [{ type: core_1.Optional }, { type: core_1.Inject, args: [kendo_angular_l10n_1.RTL,] },] },
        { type: splitter_pane_component_1.SplitterPaneComponent, decorators: [{ type: core_1.Optional }, { type: core_1.Host }, { type: core_1.Inject, args: [splitter_pane_component_1.SplitterPaneComponent,] },] },
    ]; };
    SplitterComponent.propDecorators = {
        'orientation': [{ type: core_1.Input },],
        'layoutChange': [{ type: core_1.Output },],
        'hostClasses': [{ type: core_1.HostBinding, args: ['class.k-widget',] }, { type: core_1.HostBinding, args: ['class.k-splitter',] }, { type: core_1.HostBinding, args: ['class.k-splitter-flex',] },],
        'horizontalHostClasses': [{ type: core_1.HostBinding, args: ['class.k-splitter-horizontal',] },],
        'verticalHostClasses': [{ type: core_1.HostBinding, args: ['class.k-splitter-vertical',] },],
        'dir': [{ type: core_1.HostBinding, args: ['attr.dir',] },],
        'ariaRole': [{ type: core_1.HostBinding, args: ['attr.role',] },],
        'panes': [{ type: core_1.ContentChildren, args: [splitter_pane_component_1.SplitterPaneComponent,] },],
    };
    return SplitterComponent;
}());
exports.SplitterComponent = SplitterComponent;
