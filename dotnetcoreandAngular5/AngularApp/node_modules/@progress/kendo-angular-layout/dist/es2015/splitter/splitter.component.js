import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, ContentChildren, Host, HostBinding, Inject, Input, Optional, Output, QueryList } from '@angular/core';
import { RTL } from '@progress/kendo-angular-l10n';
import { SplitterPaneComponent } from './splitter-pane.component';
import { SplitterService } from './splitter.service';
/**
 * Represents the Kendo UI Splitter component for Angular.
 *
 * ```ts-preview
 *
 *  @Component({
 *    selector: 'my-app',
 *    template: `
 *        <kendo-splitter style="height: 280px;">
 *
 *          <kendo-splitter-pane [collapsible]="true" size="30%">
 *            <h3>Inner splitter / left pane</h3>
 *            <p>Resizable and collapsible.</p>
 *          </kendo-splitter-pane>
 *
 *          <kendo-splitter-pane>
 *            <h3>Inner splitter / center pane</h3>
 *            <p>Resizable only.</p>
 *          </kendo-splitter-pane>
 *
 *          <kendo-splitter-pane [collapsible]="true" size="30%">
 *            <h3>Inner splitter / right pane</h3>
 *            <p>Resizable and collapsible.</p>
 *          </kendo-splitter-pane>
 *
 *        </kendo-splitter>
 *      `,
 *    styles: [ `
 *        h3 { font-size: 1.2em; }
 *        h3, p { margin: 10px; padding: 0; }
 *    ` ]
 *  })
 *  class AppComponent {}
 * ```
 */
let SplitterComponent = class SplitterComponent {
    constructor(element, splitterService, rtl, enclosingPane) {
        this.element = element;
        this.splitterService = splitterService;
        /**
         * Specifies the orientation of the panes within the Splitter.
         * Panes in a horizontal Splitter are placed horizontally.
         * Panes in a vertical Splitter are placed vertically.
         */
        this.orientation = 'horizontal';
        /**
         * Fires after a Splitter pane is resized or collapsed.
         * Useful for triggering layout calculations on components
         * which are positioned inside the panes.
         */
        this.layoutChange = new EventEmitter();
        this.ariaRole = 'splitter';
        if (enclosingPane) {
            enclosingPane.containsSplitter = true;
        }
        this.splitterService.layoutChange.subscribe(e => this.layoutChange.emit(e));
        this.direction = rtl ? 'rtl' : 'ltr';
    }
    get hostClasses() {
        return true;
    }
    get horizontalHostClasses() {
        return this.orientation === 'horizontal';
    }
    get verticalHostClasses() {
        return this.orientation === 'vertical';
    }
    get dir() {
        return this.direction;
    }
    ngAfterContentInit() {
        const reconfigure = () => {
            this.splitterService.configure({
                panes: this.panes.toArray(),
                orientation: this.orientation,
                containerSize: () => {
                    if (this.orientation === 'vertical') {
                        return this.element.nativeElement.offsetHeight;
                    }
                    else {
                        return this.element.nativeElement.offsetWidth;
                    }
                }
            });
        };
        reconfigure();
        this.panes.changes.subscribe(reconfigure);
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], SplitterComponent.prototype, "orientation", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], SplitterComponent.prototype, "layoutChange", void 0);
tslib_1.__decorate([
    HostBinding('class.k-widget'),
    HostBinding('class.k-splitter'),
    HostBinding('class.k-splitter-flex'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], SplitterComponent.prototype, "hostClasses", null);
tslib_1.__decorate([
    HostBinding('class.k-splitter-horizontal'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], SplitterComponent.prototype, "horizontalHostClasses", null);
tslib_1.__decorate([
    HostBinding('class.k-splitter-vertical'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], SplitterComponent.prototype, "verticalHostClasses", null);
tslib_1.__decorate([
    HostBinding('attr.dir'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [])
], SplitterComponent.prototype, "dir", null);
tslib_1.__decorate([
    HostBinding('attr.role'),
    tslib_1.__metadata("design:type", String)
], SplitterComponent.prototype, "ariaRole", void 0);
tslib_1.__decorate([
    ContentChildren(SplitterPaneComponent),
    tslib_1.__metadata("design:type", QueryList)
], SplitterComponent.prototype, "panes", void 0);
SplitterComponent = tslib_1.__decorate([
    Component({
        exportAs: 'kendoSplitter',
        selector: 'kendo-splitter',
        providers: [SplitterService],
        template: `
      <ng-content select="kendo-splitter-pane"></ng-content>
      <ng-container *ngFor="
        let pane of panes;
        let index = index;
        let last = last;
      ">
        <kendo-splitter-bar
          kendoLayoutDraggable
          *ngIf="!last"
          [index]="index"
          [orientation]="orientation">
        </kendo-splitter-bar>
      </ng-container>
    `
    }),
    tslib_1.__param(2, Optional()), tslib_1.__param(2, Inject(RTL)),
    tslib_1.__param(3, Optional()), tslib_1.__param(3, Host()), tslib_1.__param(3, Inject(SplitterPaneComponent)),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        SplitterService, Boolean, SplitterPaneComponent])
], SplitterComponent);
export { SplitterComponent };
