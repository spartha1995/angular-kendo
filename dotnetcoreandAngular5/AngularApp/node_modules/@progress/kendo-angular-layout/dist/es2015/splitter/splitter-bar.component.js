import * as tslib_1 from "tslib";
import { Component, Host, HostBinding, HostListener, Input, Optional, Inject, NgZone } from '@angular/core';
import { RTL } from '@progress/kendo-angular-l10n';
import { DraggableDirective } from '../common/draggable.directive';
import { Keys } from '../common/keys';
import { SplitterService } from './splitter.service';
import { Subscription } from 'rxjs/Subscription';
import { of } from 'rxjs/observable/of';
import { delay } from 'rxjs/operators/delay';
import { filter } from 'rxjs/operators/filter';
import { map } from 'rxjs/operators/map';
import { switchMap } from 'rxjs/operators/switchMap';
import { takeUntil } from 'rxjs/operators/takeUntil';
import { tap } from 'rxjs/operators/tap';
const stopPropagation = ({ originalEvent: event }) => {
    event.stopPropagation();
    event.preventDefault();
};
const toggleContentOverlay = (splitter, index, toggle) => {
    splitter.pane(index).overlayContent = toggle;
    splitter.pane(index + 1).overlayContent = toggle;
};
const preventOnDblClick = release => mouseDown => of(mouseDown).pipe(delay(150), takeUntil(release));
const classFromObject = classes => Object.keys(classes).filter(c => classes[c]).join(' ');
const createMoveStream = (draggable) => mouseDown => draggable.kendo.drag
    .pipe(takeUntil(draggable.kendo.release), map(({ pageX, pageY }) => ({
    originalX: mouseDown.pageX,
    originalY: mouseDown.pageY,
    pageX,
    pageY
})));
/**
 * @hidden
 */
let SplitterBarComponent = class SplitterBarComponent {
    constructor(draggable, splitter, zone, rtl) {
        this.draggable = draggable;
        this.splitter = splitter;
        this.zone = zone;
        this.orientation = 'horizontal';
        this.index = 0;
        this.ariaRole = 'separator';
        this.focused = false;
        this.subscriptions = new Subscription();
        this.direction = rtl ? 'rtl' : 'ltr';
    }
    get tabIndex() {
        return this.splitter.isStatic(this.index) ? -1 : 0;
    }
    get hostClasses() {
        const isHorizontal = this.orientation === 'horizontal';
        const isDraggable = this.splitter.isDraggable(this.index);
        const isStatic = this.splitter.isStatic(this.index);
        return classFromObject({
            'k-state-focused': this.focused,
            'k-splitbar': true,
            'k-splitbar-horizontal': isHorizontal,
            'k-splitbar-vertical': !isHorizontal,
            'k-splitbar-draggable-horizontal': isHorizontal && isDraggable,
            'k-splitbar-draggable-vertical': !isHorizontal && isDraggable,
            'k-splitbar-static-horizontal': isHorizontal && isStatic,
            'k-splitbar-static-vertical': !isHorizontal && isStatic
        });
    }
    get order() {
        return 2 * this.index + 1;
    }
    collapseAny() {
        this.tryToggleNearest();
    }
    onFocusIn() {
        this.focused = true;
    }
    onFocusOut() {
        this.focused = false;
    }
    onKeyDown(event) {
        const keyCode = event && event.keyCode;
        const isHorizontal = this.orientation === 'horizontal';
        const resize = delta => {
            event.preventDefault();
            const state = this.splitter.dragState(this.index);
            // resizing next pane, reverse delta
            if (state.index === this.index + 1) {
                delta *= -1;
            }
            this.splitter.setSize(state, delta);
        };
        if (keyCode === Keys.enter) {
            event.preventDefault();
            this.tryToggleNearest();
        }
        else if (isHorizontal && keyCode === Keys.left) {
            resize(-10);
        }
        else if (isHorizontal && keyCode === Keys.right) {
            resize(10);
        }
        else if (!isHorizontal && keyCode === Keys.up) {
            resize(-10);
        }
        else if (!isHorizontal && keyCode === Keys.down) {
            resize(10);
        }
    }
    ngOnInit() {
        this.subscriptions.add(this.zone.runOutsideAngular(() => {
            let state;
            this.draggable.kendo.press.pipe(tap(stopPropagation), filter(() => this.splitter.isDraggable(this.index)), tap(() => state = this.splitter.dragState(this.index)), tap(() => toggleContentOverlay(this.splitter, this.index, true)), switchMap(preventOnDblClick(this.draggable.kendo.release)), switchMap(createMoveStream(this.draggable))).subscribe(({ pageX, pageY, originalX, originalY }) => {
                let delta;
                if (this.orientation === 'vertical') {
                    delta = pageY - originalY;
                }
                else if (this.direction === 'rtl') {
                    delta = originalX - pageX;
                }
                else {
                    delta = pageX - originalX;
                }
                // resizing next pane, reverse delta
                if (state.index === this.index + 1) {
                    delta *= -1;
                }
                this.splitter.setSize(state, delta);
            });
        }));
        this.subscriptions.add(this.draggable.kendo.release.subscribe(() => toggleContentOverlay(this.splitter, this.index, false)));
    }
    ngOnDestroy() {
        if (this.subscriptions) {
            this.subscriptions.unsubscribe();
        }
    }
    togglePrevious() {
        this.splitter.tryToggle(this.index);
    }
    toggleNext() {
        this.splitter.tryToggle(this.index + 1);
    }
    previousArrowClass() {
        const pane = this.splitter.pane(this.index);
        const isCollapsible = pane.collapsible;
        const isCollapsed = pane.collapsed;
        const isHorizontal = this.orientation === 'horizontal';
        return classFromObject({
            'k-icon': true,
            'k-hidden': !isCollapsible,
            'k-collapse-prev': isCollapsible,
            'k-i-arrow-60-left': isCollapsible && isHorizontal && !isCollapsed,
            'k-i-arrow-60-right': isCollapsible && isHorizontal && isCollapsed,
            'k-i-arrow-60-up': isCollapsible && !isHorizontal && !isCollapsed,
            'k-i-arrow-60-down': isCollapsible && !isHorizontal && isCollapsed
        });
    }
    nextArrowClass() {
        const pane = this.splitter.pane(this.index + 1);
        const isCollapsible = pane.collapsible;
        const isCollapsed = pane.collapsed;
        const isHorizontal = this.orientation === 'horizontal';
        return classFromObject({
            'k-icon': true,
            'k-hidden': !isCollapsible,
            'k-collapse-next': isCollapsible,
            'k-i-arrow-60-right': isCollapsible && isHorizontal && !isCollapsed,
            'k-i-arrow-60-left': isCollapsible && isHorizontal && isCollapsed,
            'k-i-arrow-60-down': isCollapsible && !isHorizontal && !isCollapsed,
            'k-i-arrow-60-up': isCollapsible && !isHorizontal && isCollapsed
        });
    }
    tryToggleNearest() {
        const prev = this.index;
        const next = this.index + 1;
        if (!this.splitter.tryToggle(prev)) {
            this.splitter.tryToggle(next);
        }
    }
};
tslib_1.__decorate([
    Input(),
    HostBinding('attr.aria-orientation'),
    tslib_1.__metadata("design:type", String)
], SplitterBarComponent.prototype, "orientation", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], SplitterBarComponent.prototype, "index", void 0);
tslib_1.__decorate([
    HostBinding('attr.role'),
    tslib_1.__metadata("design:type", String)
], SplitterBarComponent.prototype, "ariaRole", void 0);
tslib_1.__decorate([
    HostBinding('attr.tabindex'),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [])
], SplitterBarComponent.prototype, "tabIndex", null);
tslib_1.__decorate([
    HostBinding('class'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [])
], SplitterBarComponent.prototype, "hostClasses", null);
tslib_1.__decorate([
    HostBinding('class.k-state-focused'),
    tslib_1.__metadata("design:type", Boolean)
], SplitterBarComponent.prototype, "focused", void 0);
tslib_1.__decorate([
    HostBinding('style.order'),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [])
], SplitterBarComponent.prototype, "order", null);
tslib_1.__decorate([
    HostListener('dblclick'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], SplitterBarComponent.prototype, "collapseAny", null);
tslib_1.__decorate([
    HostListener('focusin'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], SplitterBarComponent.prototype, "onFocusIn", null);
tslib_1.__decorate([
    HostListener('focusout'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], SplitterBarComponent.prototype, "onFocusOut", null);
tslib_1.__decorate([
    HostListener('keydown', ['$event']),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", void 0)
], SplitterBarComponent.prototype, "onKeyDown", null);
SplitterBarComponent = tslib_1.__decorate([
    Component({
        selector: 'kendo-splitter-bar',
        template: `
      <div [class]="previousArrowClass()" (click)="togglePrevious()"></div>
      <div class="k-resize-handle"></div>
      <div [class]="nextArrowClass()" (click)="toggleNext()"></div>
    `
    }),
    tslib_1.__param(0, Host()),
    tslib_1.__param(3, Optional()), tslib_1.__param(3, Inject(RTL)),
    tslib_1.__metadata("design:paramtypes", [DraggableDirective,
        SplitterService,
        NgZone, Boolean])
], SplitterBarComponent);
export { SplitterBarComponent };
