import * as tslib_1 from "tslib";
import { Component, Input, ContentChildren, ViewChildren, Optional, Host, HostBinding, SkipSelf, isDevMode, TemplateRef, QueryList, AUTO_STYLE, ViewChild, ElementRef, animate, trigger, style, state, transition } from '@angular/core';
import { PanelBarService } from "./panelbar.service";
import { PanelBarContentDirective } from "./panelbar-content.directive";
import { PanelBarItemTitleDirective } from "./panelbar-item-title.directive";
import { Subscription } from 'rxjs/Subscription';
/**
 * @hidden
 */
let nextId = 0;
/**
 * Represents the Kendo UI PanelBar items.
 */
let PanelBarItemComponent = PanelBarItemComponent_1 = class PanelBarItemComponent {
    constructor(parent, eventService) {
        this.parent = parent;
        this.eventService = eventService;
        /**
         * Sets the title of the PanelBar item.
         */
        this.title = 'Untitled';
        /**
         * Allows the component to set the `"id"` property to each item.
         * Used to set the `id` attributes of the nested elements and enable ARIA support.
         */
        this.id = `default-${nextId++}`;
        /**
         * Defines an icon to be rendered next to the title.
         */
        this.icon = '';
        /**
         * Defines an icon with a custom CSS class to be rendered next to the title.
         */
        this.iconClass = '';
        /**
         * Defines the location of an image to be displayed next to the title.
         */
        this.imageUrl = '';
        /**
         * Disables a PanelBar item when set to `true`.
         */
        this.disabled = false;
        /**
         * Sets the selected state of a PanelBar item.
         */
        this.selected = false;
        this.keepContent = false;
        this.hasChildItems = false;
        this.hasContent = false;
        this.state = "inactive";
        this.animate = false;
        this.role = "treeitem";
        this.titleAttribute = null; // tslint:disable-line
        this.focused = false;
        this.wrapperFocused = false;
        this.subscriptions = new Subscription(() => { });
        this._expanded = false;
        this.subscriptions.add(eventService.parent$.subscribe(focused => this.onWrapperFocusChange(focused)));
        this.subscriptions.add(eventService.keepContent$.subscribe(keepContent => this.keepContent = keepContent));
        this.wrapperFocused = parent ? parent.focused : false;
    }
    /**
     * Expands the PanelBar item when set to `true`.
     */
    set expanded(value) {
        let activeState = this.animate ? "active" : "activeWithoutAnimation";
        this.state = value ? activeState : "inactive";
        this._expanded = value;
    }
    get expanded() {
        return this._expanded;
    }
    get kItemClass() {
        return true;
    }
    get kStateDefaultClass() {
        return !this.disabled;
    }
    get kStateDisabledClass() {
        return this.disabled;
    }
    get kStateExpandedClass() {
        return !this.disabled && this.expanded && (this.hasChildItems || this.hasContent);
    }
    get itemId() {
        return 'k-panelbar-' + this.eventService.pbId + '-item-' + this.id;
    }
    get ariaExpanded() {
        return (this.hasChildItems || this.hasContent) ? !this.disabled && this.expanded : null;
    }
    get ariaSelected() {
        return !this.disabled && this.selected;
    }
    get ariaDisabled() {
        return this.disabled ? true : null;
    }
    /**
     * @hidden
     */
    get titleTemplate() {
        return this.titleTemplates.length > 0 ? this.titleTemplates.toArray()[0].templateRef : undefined;
    }
    /**
     * @hidden
     */
    headerHeight() {
        return this.header.nativeElement.offsetHeight;
    }
    /**
     * @hidden
     */
    ngAfterContentChecked() {
        this.hasChildItems = this.contentItems.length > 1 || (this.items && this.items.length > 0);
        this.hasContent = (this.contentTemplate !== undefined && this.contentTemplate.length > 0) ||
            this.content !== undefined;
        this.validateConfiguration();
    }
    /**
     * @hidden
     */
    ngAfterViewChecked() {
        if (this.items) {
            this.childrenItems = this.viewChildItems.toArray();
        }
        else {
            this.childrenItems = this.contentItems.filter(item => item !== this);
        }
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    /**
     * @hidden
     */
    onItemAction() {
        if (!this.disabled) {
            this.eventService.onSelect(this);
        }
    }
    /**
     * @hidden
     */
    get iconClasses() {
        let icon = this.icon ? 'k-i-' + this.icon : null;
        return {
            [icon || this.iconClass]: true
        };
    }
    /**
     * @hidden
     */
    serialize() {
        return {
            content: this.content,
            disabled: this.disabled,
            expanded: this.expanded,
            focused: this.focused,
            icon: this.icon,
            iconClass: this.iconClass,
            id: this.id,
            imageUrl: this.imageUrl,
            selected: this.selected,
            title: this.title
        };
    }
    /**
     * @hidden
     */
    subTreeViewItems() {
        let subTree = [];
        this.viewChildItems.forEach(item => {
            subTree = subTree.concat(item.subTreeViewItems());
            subTree.push(item);
        });
        return subTree;
    }
    /**
     * @hidden
     */
    validateConfiguration() {
        if (isDevMode()) {
            if (this.content && (this.contentTemplate !== undefined && this.contentTemplate.length > 0)) {
                throw new Error("Invalid configuration: mixed template components and component property.");
            }
        }
    }
    onWrapperFocusChange(focused) {
        this.wrapperFocused = focused;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], PanelBarItemComponent.prototype, "title", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], PanelBarItemComponent.prototype, "id", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], PanelBarItemComponent.prototype, "icon", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], PanelBarItemComponent.prototype, "iconClass", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], PanelBarItemComponent.prototype, "imageUrl", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], PanelBarItemComponent.prototype, "disabled", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], PanelBarItemComponent.prototype, "expanded", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], PanelBarItemComponent.prototype, "selected", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], PanelBarItemComponent.prototype, "content", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], PanelBarItemComponent.prototype, "items", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", TemplateRef)
], PanelBarItemComponent.prototype, "template", void 0);
tslib_1.__decorate([
    ViewChild('header', {}),
    tslib_1.__metadata("design:type", ElementRef)
], PanelBarItemComponent.prototype, "header", void 0);
tslib_1.__decorate([
    HostBinding('attr.role'),
    tslib_1.__metadata("design:type", String)
], PanelBarItemComponent.prototype, "role", void 0);
tslib_1.__decorate([
    HostBinding('attr.title'),
    tslib_1.__metadata("design:type", String)
], PanelBarItemComponent.prototype, "titleAttribute", void 0);
tslib_1.__decorate([
    HostBinding('class.k-item'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], PanelBarItemComponent.prototype, "kItemClass", null);
tslib_1.__decorate([
    HostBinding('class.k-state-default'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], PanelBarItemComponent.prototype, "kStateDefaultClass", null);
tslib_1.__decorate([
    HostBinding('class.k-state-disabled'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], PanelBarItemComponent.prototype, "kStateDisabledClass", null);
tslib_1.__decorate([
    HostBinding('class.k-state-expanded'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], PanelBarItemComponent.prototype, "kStateExpandedClass", null);
tslib_1.__decorate([
    HostBinding('id'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [])
], PanelBarItemComponent.prototype, "itemId", null);
tslib_1.__decorate([
    HostBinding('attr.aria-expanded'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], PanelBarItemComponent.prototype, "ariaExpanded", null);
tslib_1.__decorate([
    HostBinding('attr.aria-selected'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], PanelBarItemComponent.prototype, "ariaSelected", null);
tslib_1.__decorate([
    HostBinding('attr.aria-disabled'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], PanelBarItemComponent.prototype, "ariaDisabled", null);
tslib_1.__decorate([
    ViewChildren(PanelBarItemComponent_1),
    tslib_1.__metadata("design:type", QueryList)
], PanelBarItemComponent.prototype, "viewChildItems", void 0);
tslib_1.__decorate([
    ContentChildren(PanelBarItemComponent_1),
    tslib_1.__metadata("design:type", QueryList)
], PanelBarItemComponent.prototype, "contentItems", void 0);
tslib_1.__decorate([
    ContentChildren(PanelBarContentDirective, { descendants: false }),
    tslib_1.__metadata("design:type", QueryList)
], PanelBarItemComponent.prototype, "contentTemplate", void 0);
tslib_1.__decorate([
    ContentChildren(PanelBarItemTitleDirective, { descendants: false }),
    tslib_1.__metadata("design:type", QueryList)
], PanelBarItemComponent.prototype, "titleTemplates", void 0);
PanelBarItemComponent = PanelBarItemComponent_1 = tslib_1.__decorate([
    Component({
        animations: [
            trigger('toggle', [
                state('inactive', style({ display: 'none', height: '0px' })),
                transition('active => void', [
                    animate(200, style({ display: 'block', height: '0px' }))
                ]),
                transition('void => active', [
                    style({ display: 'block', height: '0px' }),
                    animate(200, style({ display: 'block', height: AUTO_STYLE }))
                ]),
                transition('inactive => active', [
                    style({ display: 'block', height: '0px' }),
                    animate(200, style({ display: 'block', height: AUTO_STYLE }))
                ]),
                transition('active => inactive', [
                    animate(200, style({ display: 'none', height: '0px' }))
                ])
            ])
        ],
        exportAs: 'kendoPanelbarItem',
        selector: "kendo-panelbar-item",
        template: `<span
                #header
                [class.k-link]="true"
                [class.k-header]="!parent"
                [class.k-state-selected]="!disabled && selected"
                [class.k-state-focused]="!disabled && focused && wrapperFocused"
                (click)="onItemAction()">
            <span
                *ngIf="icon || iconClass"
                class="k-icon"
                [ngClass]="iconClasses">
            </span>
            <img
                *ngIf="imageUrl"
                class="k-image"
                [src]="imageUrl"
                alt="">
            {{title}}
            <ng-template [ngTemplateOutlet]="titleTemplate"></ng-template>
            <span *ngIf="hasChildItems || hasContent"
                [class.k-icon]="true"
                [class.k-i-arrow-n]="expanded"
                [class.k-panelbar-collapse]="expanded"
                [class.k-i-arrow-s]="!expanded"
                [class.k-panelbar-expand]="!expanded">
            </span>
        </span>
        <div
            *ngIf="keepContent || (!disabled && expanded && (hasChildItems || hasContent))"
            [@toggle]="state"
            [style.overflow]="'hidden'"
            [attr.role]="'group'"
            [attr.aria-hidden]="!disabled && !expanded">
            <div
                *ngIf="hasChildItems && !items?.length"
                [style.overflow]="contentOverflow"
                [style.height]="contentHeight"
                class="k-panel k-group">
                    <ng-content select="kendo-panelbar-item"></ng-content>
            </div>
            <div
                *ngIf="hasContent && !content"
                [style.overflow]="contentOverflow"
                [style.height]="contentHeight"
                class="k-content">
                <ng-template
                    [ngTemplateOutlet]="contentTemplate.first.templateRef"
                    [ngTemplateOutletContext]="{
                        $implicit: {
                            title: title,
                            id: id,
                            icon: icon,
                            imageUrl: imageUrl,
                            disabled: disabled,
                            content: content
                        }
                    }">
                </ng-template>
            </div>
            <div
                *ngIf="items?.length"
                [style.overflow]="contentOverflow"
                [style.height]="contentHeight"
                class="k-panel k-group">
                    <kendo-panelbar-item
                        *ngFor="let item of items"
                        [title]="item.title"
                        [id]="item.id"
                        [icon]="item.icon"
                        [iconClass]="item.iconClass"
                        [imageUrl]="item.imageUrl"
                        [selected]="!!item.selected"
                        [expanded]="!!item.expanded"
                        [disabled]="!!item.disabled"
                        [template]="template"
                        [items]="item.children"
                        [content]="item.content">
                    </kendo-panelbar-item>
            </div>
            <div
                *ngIf="content"
                [style.overflow]="contentOverflow"
                [style.height]="contentHeight"
                class="k-content">
                <ng-template
                    [ngTemplateOutlet]="template"
                    [ngTemplateOutletContext]="{
                        $implicit: {
                            title: title,
                            id: id,
                            icon: icon,
                            imageUrl: imageUrl,
                            disabled: disabled,
                            content: content
                        }
                    }">
                </ng-template>
                <ng-template [ngIf]="!template">{{content}}</ng-template>
            </div>
        </div>`
    }),
    tslib_1.__param(0, SkipSelf()), tslib_1.__param(0, Host()), tslib_1.__param(0, Optional()),
    tslib_1.__metadata("design:paramtypes", [PanelBarItemComponent,
        PanelBarService])
], PanelBarItemComponent);
export { PanelBarItemComponent };
var PanelBarItemComponent_1;
