import * as tslib_1 from "tslib";
import { Component, ContentChildren, ElementRef, EventEmitter, HostBinding, Inject, Input, Optional, Output, QueryList, ViewChild, Renderer2 } from '@angular/core';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { RTL } from '@progress/kendo-angular-l10n';
import { TabStripTabComponent } from './tabstrip-tab.component';
import { Keys } from '../common/keys';
import { SelectEvent } from './tabstrip-events';
/**
 * Represents the Kendo UI TabStrip component for Angular
 * (see the [basic usage example]({% slug overview_tabstrip %})).
 */
let TabStripComponent = class TabStripComponent {
    constructor(rtl, renderer, wrapper) {
        this.renderer = renderer;
        this.wrapper = wrapper;
        /**
         * Enables the tab animation.
         */
        this.animate = true;
        /**
         * When set to `true`, the component renders all tabs and they are persisted in the DOM.
         * By default, this option is set to `false`.
         */
        this.keepTabContent = false;
        /**
         * Fires each time the user selects a tab.
         * The event data contains the index of the selected tab and its title.
         */
        this.tabSelect = new EventEmitter();
        /**
         * @hidden
         */
        this._animate = false;
        this.direction = rtl ? 'rtl' : 'ltr';
        this.keyBindings = this.computedKeys;
    }
    /**
     * Sets the height of the TabStrip.
     */
    set height(value) {
        this._height = value;
        this.renderer.setStyle(this.wrapper.nativeElement, 'height', value);
    }
    get height() {
        return this._height;
    }
    get hostClasses() {
        return true;
    }
    get dir() {
        return this.direction;
    }
    /**
     * @hidden
     */
    contentClass(active) {
        const visible = !this.keepTabContent || active;
        return visible ? 'k-content k-state-active' : 'k-content';
    }
    get computedKeys() {
        return {
            [this.invertKeys(Keys.left, Keys.right)]: (selectedIndex) => this.prevNavigatableIndex(selectedIndex),
            [this.invertKeys(Keys.right, Keys.left)]: (selectedIndex) => this.nextNavigatableIndex(selectedIndex),
            [this.invertKeys(Keys.down, Keys.up)]: (selectedIndex) => this.nextNavigatableIndex(selectedIndex),
            [this.invertKeys(Keys.up, Keys.down)]: (selectedIndex) => this.prevNavigatableIndex(selectedIndex),
            [Keys.home]: () => this.firstNavigatableIndex(),
            [Keys.end]: () => this.lastNavigatableIndex()
        };
    }
    /**
     * @hidden
     */
    invertKeys(original, inverted) {
        return this.direction === 'rtl' ? inverted : original;
    }
    /**
     * @hidden
     */
    onKeyDown(event) {
        let selectedIndex = this.tabs.toArray().findIndex(tab => tab.active && !tab.disabled);
        if (event.currentTarget !== this.tablist.nativeElement) {
            return;
        }
        if (event.keyCode === Keys.space || event.keyCode === Keys.up || event.keyCode === Keys.down ||
            event.keyCode === Keys.left || event.keyCode === Keys.right || event.keyCode === Keys.home ||
            event.keyCode === Keys.end || event.keyCode === Keys['page up'] || event.keyCode === Keys['page down']) {
            event.preventDefault();
        }
        if (selectedIndex === -1) {
            this.selectTab(this.firstNavigatableIndex());
        }
        else {
            const getTabIndex = this.keyBindings[event.keyCode];
            if (getTabIndex) {
                const nextIndex = getTabIndex(selectedIndex);
                if (selectedIndex !== nextIndex) {
                    this.selectTab(getTabIndex(selectedIndex));
                }
            }
        }
    }
    /**
     * @hidden
     */
    tabPanelId(id) {
        return 'k-tabstrip-tabpanel-' + id;
    }
    /**
     * @hidden
     */
    tabId(id) {
        return 'k-tabstrip-tab-' + id;
    }
    /**
     * Allows the user to select a tab programmatically.
     * @param {number} index - The index of the tab that will be selected.
     */
    selectTab(index) {
        const tab = this.tabs.toArray()[index];
        if (!tab || !!tab.disabled) {
            return;
        }
        this.emitEvent(tab, index);
    }
    firstNavigatableIndex() {
        const tabs = this.tabs.toArray();
        for (let i = 0; i < tabs.length; i++) {
            if (!tabs[i].disabled) {
                return i;
            }
        }
    }
    lastNavigatableIndex() {
        const tabs = this.tabs.toArray();
        for (let i = tabs.length - 1; i > 0; i--) {
            if (!tabs[i].disabled) {
                return i;
            }
        }
    }
    prevNavigatableIndex(selectedIndex) {
        if (selectedIndex - 1 < 0) {
            return this.lastNavigatableIndex();
        }
        const tabs = this.tabs.toArray();
        for (let i = selectedIndex - 1; i > -1; i--) {
            if (!tabs[i].disabled) {
                return i;
            }
            if (i === 0) {
                return this.lastNavigatableIndex();
            }
        }
        return selectedIndex;
    }
    nextNavigatableIndex(selectedIndex) {
        if (selectedIndex + 1 >= this.tabs.length) {
            return this.firstNavigatableIndex();
        }
        const tabs = this.tabs.toArray();
        for (let i = selectedIndex + 1; i < tabs.length; i++) {
            if (!tabs[i].disabled) {
                return i;
            }
            if (i + 1 === tabs.length) {
                return this.firstNavigatableIndex();
            }
        }
    }
    emitEvent(tab, selectedIndex) {
        const selectArgs = new SelectEvent(selectedIndex, tab.title);
        this.tabSelect.emit(selectArgs);
        if (!selectArgs.isDefaultPrevented()) {
            this._animate = this.animate;
            this.deactivateAll();
            tab.active = true;
        }
    }
    deactivateAll() {
        this.tabs.forEach((tab) => {
            tab.active = false;
        });
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], TabStripComponent.prototype, "height", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], TabStripComponent.prototype, "animate", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], TabStripComponent.prototype, "keepTabContent", void 0);
tslib_1.__decorate([
    ViewChild('tablist'),
    tslib_1.__metadata("design:type", ElementRef)
], TabStripComponent.prototype, "tablist", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], TabStripComponent.prototype, "tabSelect", void 0);
tslib_1.__decorate([
    HostBinding('class.k-widget'),
    HostBinding('class.k-tabstrip'),
    HostBinding('class.k-floatwrap'),
    HostBinding('class.k-tabstrip-top'),
    HostBinding('class.k-header'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], TabStripComponent.prototype, "hostClasses", null);
tslib_1.__decorate([
    HostBinding('attr.dir'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [])
], TabStripComponent.prototype, "dir", null);
tslib_1.__decorate([
    ContentChildren(TabStripTabComponent),
    tslib_1.__metadata("design:type", QueryList)
], TabStripComponent.prototype, "tabs", void 0);
TabStripComponent = tslib_1.__decorate([
    Component({
        animations: [
            trigger('state', [
                state('active', style({ opacity: 1 })),
                transition('* => active', [
                    style({ opacity: 0 }),
                    animate('400ms ease-in')
                ])
            ])
        ],
        exportAs: 'kendoTabStrip',
        selector: 'kendo-tabstrip',
        template: `
        <ul
            class="k-reset k-tabstrip-items"
            role="tablist"
            (keydown)="onKeyDown($event)"
            [tabIndex]="0"
            #tablist
        >
            <li *ngFor="let tab of tabs; let i = index;" (click)="selectTab(i)"
                role="tab"
                [id]="tabId(i)"
                [class.k-item]="true"
                [class.k-state-default]="true"
                [class.k-state-active]="tab.active"
                [class.k-state-disabled]="tab.disabled"
                [attr.aria-selected]="tab.active"
                [attr.aria-controls]="tab.tabPanelId"
                [attr.aria-disabled]="tab.disabled"
            ><span class="k-link">{{ tab.title }}<ng-template [ngTemplateOutlet]="tab.tabTitle?.templateRef"></ng-template></span></li>
        </ul>
        <ng-template ngFor let-tab [ngForOf]="tabs" let-i="index">
            <div
                [@state]="tab.active && _animate ? 'active' : 'inactive'"
                *ngIf="tab.active || keepTabContent"
                [ngClass]="contentClass(tab.active)"
                role="tabpanel"
                [id]="tabPanelId(i)"
                [attr.aria-hidden]="!tab.active"
                [attr.aria-expanded]="tab.active"
                [attr.aria-labelledby]="tabId(i)"
                [attr.aria-disabled]="tab.disabled"
            >
                <ng-template [ngTemplateOutlet]="tab.tabContent?.templateRef"></ng-template>
            </div>
        </ng-template>
    `
    }),
    tslib_1.__param(0, Optional()), tslib_1.__param(0, Inject(RTL)),
    tslib_1.__metadata("design:paramtypes", [Boolean, Renderer2, ElementRef])
], TabStripComponent);
export { TabStripComponent };
