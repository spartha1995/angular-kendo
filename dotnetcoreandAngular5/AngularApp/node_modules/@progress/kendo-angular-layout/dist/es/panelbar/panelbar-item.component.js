import * as tslib_1 from "tslib";
import { Component, Input, ContentChildren, ViewChildren, Optional, Host, HostBinding, SkipSelf, isDevMode, TemplateRef, QueryList, AUTO_STYLE, ViewChild, ElementRef, animate, trigger, style, state, transition } from '@angular/core';
import { PanelBarService } from "./panelbar.service";
import { PanelBarContentDirective } from "./panelbar-content.directive";
import { PanelBarItemTitleDirective } from "./panelbar-item-title.directive";
import { Subscription } from 'rxjs/Subscription';
/**
 * @hidden
 */
var nextId = 0;
/**
 * Represents the Kendo UI PanelBar items.
 */
var PanelBarItemComponent = /** @class */ (function () {
    function PanelBarItemComponent(parent, eventService) {
        var _this = this;
        this.parent = parent;
        this.eventService = eventService;
        /**
         * Sets the title of the PanelBar item.
         */
        this.title = 'Untitled';
        /**
         * Allows the component to set the `"id"` property to each item.
         * Used to set the `id` attributes of the nested elements and enable ARIA support.
         */
        this.id = "default-" + nextId++;
        /**
         * Defines an icon to be rendered next to the title.
         */
        this.icon = '';
        /**
         * Defines an icon with a custom CSS class to be rendered next to the title.
         */
        this.iconClass = '';
        /**
         * Defines the location of an image to be displayed next to the title.
         */
        this.imageUrl = '';
        /**
         * Disables a PanelBar item when set to `true`.
         */
        this.disabled = false;
        /**
         * Sets the selected state of a PanelBar item.
         */
        this.selected = false;
        this.keepContent = false;
        this.hasChildItems = false;
        this.hasContent = false;
        this.state = "inactive";
        this.animate = false;
        this.role = "treeitem";
        this.titleAttribute = null; // tslint:disable-line
        this.focused = false;
        this.wrapperFocused = false;
        this.subscriptions = new Subscription(function () { });
        this._expanded = false;
        this.subscriptions.add(eventService.parent$.subscribe(function (focused) { return _this.onWrapperFocusChange(focused); }));
        this.subscriptions.add(eventService.keepContent$.subscribe(function (keepContent) { return _this.keepContent = keepContent; }));
        this.wrapperFocused = parent ? parent.focused : false;
    }
    PanelBarItemComponent_1 = PanelBarItemComponent;
    Object.defineProperty(PanelBarItemComponent.prototype, "expanded", {
        get: function () {
            return this._expanded;
        },
        /**
         * Expands the PanelBar item when set to `true`.
         */
        set: function (value) {
            var activeState = this.animate ? "active" : "activeWithoutAnimation";
            this.state = value ? activeState : "inactive";
            this._expanded = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PanelBarItemComponent.prototype, "kItemClass", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PanelBarItemComponent.prototype, "kStateDefaultClass", {
        get: function () {
            return !this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PanelBarItemComponent.prototype, "kStateDisabledClass", {
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PanelBarItemComponent.prototype, "kStateExpandedClass", {
        get: function () {
            return !this.disabled && this.expanded && (this.hasChildItems || this.hasContent);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PanelBarItemComponent.prototype, "itemId", {
        get: function () {
            return 'k-panelbar-' + this.eventService.pbId + '-item-' + this.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PanelBarItemComponent.prototype, "ariaExpanded", {
        get: function () {
            return (this.hasChildItems || this.hasContent) ? !this.disabled && this.expanded : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PanelBarItemComponent.prototype, "ariaSelected", {
        get: function () {
            return !this.disabled && this.selected;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PanelBarItemComponent.prototype, "ariaDisabled", {
        get: function () {
            return this.disabled ? true : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PanelBarItemComponent.prototype, "titleTemplate", {
        /**
         * @hidden
         */
        get: function () {
            return this.titleTemplates.length > 0 ? this.titleTemplates.toArray()[0].templateRef : undefined;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    PanelBarItemComponent.prototype.headerHeight = function () {
        return this.header.nativeElement.offsetHeight;
    };
    /**
     * @hidden
     */
    PanelBarItemComponent.prototype.ngAfterContentChecked = function () {
        this.hasChildItems = this.contentItems.length > 1 || (this.items && this.items.length > 0);
        this.hasContent = (this.contentTemplate !== undefined && this.contentTemplate.length > 0) ||
            this.content !== undefined;
        this.validateConfiguration();
    };
    /**
     * @hidden
     */
    PanelBarItemComponent.prototype.ngAfterViewChecked = function () {
        var _this = this;
        if (this.items) {
            this.childrenItems = this.viewChildItems.toArray();
        }
        else {
            this.childrenItems = this.contentItems.filter(function (item) { return item !== _this; });
        }
    };
    /**
     * @hidden
     */
    PanelBarItemComponent.prototype.ngOnDestroy = function () {
        this.subscriptions.unsubscribe();
    };
    /**
     * @hidden
     */
    PanelBarItemComponent.prototype.onItemAction = function () {
        if (!this.disabled) {
            this.eventService.onSelect(this);
        }
    };
    Object.defineProperty(PanelBarItemComponent.prototype, "iconClasses", {
        /**
         * @hidden
         */
        get: function () {
            var icon = this.icon ? 'k-i-' + this.icon : null;
            return _a = {},
                _a[icon || this.iconClass] = true,
                _a;
            var _a;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    PanelBarItemComponent.prototype.serialize = function () {
        return {
            content: this.content,
            disabled: this.disabled,
            expanded: this.expanded,
            focused: this.focused,
            icon: this.icon,
            iconClass: this.iconClass,
            id: this.id,
            imageUrl: this.imageUrl,
            selected: this.selected,
            title: this.title
        };
    };
    /**
     * @hidden
     */
    PanelBarItemComponent.prototype.subTreeViewItems = function () {
        var subTree = [];
        this.viewChildItems.forEach(function (item) {
            subTree = subTree.concat(item.subTreeViewItems());
            subTree.push(item);
        });
        return subTree;
    };
    /**
     * @hidden
     */
    PanelBarItemComponent.prototype.validateConfiguration = function () {
        if (isDevMode()) {
            if (this.content && (this.contentTemplate !== undefined && this.contentTemplate.length > 0)) {
                throw new Error("Invalid configuration: mixed template components and component property.");
            }
        }
    };
    PanelBarItemComponent.prototype.onWrapperFocusChange = function (focused) {
        this.wrapperFocused = focused;
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], PanelBarItemComponent.prototype, "title", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], PanelBarItemComponent.prototype, "id", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], PanelBarItemComponent.prototype, "icon", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], PanelBarItemComponent.prototype, "iconClass", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], PanelBarItemComponent.prototype, "imageUrl", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], PanelBarItemComponent.prototype, "disabled", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], PanelBarItemComponent.prototype, "expanded", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], PanelBarItemComponent.prototype, "selected", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], PanelBarItemComponent.prototype, "content", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Array)
    ], PanelBarItemComponent.prototype, "items", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", TemplateRef)
    ], PanelBarItemComponent.prototype, "template", void 0);
    tslib_1.__decorate([
        ViewChild('header', {}),
        tslib_1.__metadata("design:type", ElementRef)
    ], PanelBarItemComponent.prototype, "header", void 0);
    tslib_1.__decorate([
        HostBinding('attr.role'),
        tslib_1.__metadata("design:type", String)
    ], PanelBarItemComponent.prototype, "role", void 0);
    tslib_1.__decorate([
        HostBinding('attr.title'),
        tslib_1.__metadata("design:type", String)
    ], PanelBarItemComponent.prototype, "titleAttribute", void 0);
    tslib_1.__decorate([
        HostBinding('class.k-item'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], PanelBarItemComponent.prototype, "kItemClass", null);
    tslib_1.__decorate([
        HostBinding('class.k-state-default'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], PanelBarItemComponent.prototype, "kStateDefaultClass", null);
    tslib_1.__decorate([
        HostBinding('class.k-state-disabled'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], PanelBarItemComponent.prototype, "kStateDisabledClass", null);
    tslib_1.__decorate([
        HostBinding('class.k-state-expanded'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], PanelBarItemComponent.prototype, "kStateExpandedClass", null);
    tslib_1.__decorate([
        HostBinding('id'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [])
    ], PanelBarItemComponent.prototype, "itemId", null);
    tslib_1.__decorate([
        HostBinding('attr.aria-expanded'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], PanelBarItemComponent.prototype, "ariaExpanded", null);
    tslib_1.__decorate([
        HostBinding('attr.aria-selected'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], PanelBarItemComponent.prototype, "ariaSelected", null);
    tslib_1.__decorate([
        HostBinding('attr.aria-disabled'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], PanelBarItemComponent.prototype, "ariaDisabled", null);
    tslib_1.__decorate([
        ViewChildren(PanelBarItemComponent_1),
        tslib_1.__metadata("design:type", QueryList)
    ], PanelBarItemComponent.prototype, "viewChildItems", void 0);
    tslib_1.__decorate([
        ContentChildren(PanelBarItemComponent_1),
        tslib_1.__metadata("design:type", QueryList)
    ], PanelBarItemComponent.prototype, "contentItems", void 0);
    tslib_1.__decorate([
        ContentChildren(PanelBarContentDirective, { descendants: false }),
        tslib_1.__metadata("design:type", QueryList)
    ], PanelBarItemComponent.prototype, "contentTemplate", void 0);
    tslib_1.__decorate([
        ContentChildren(PanelBarItemTitleDirective, { descendants: false }),
        tslib_1.__metadata("design:type", QueryList)
    ], PanelBarItemComponent.prototype, "titleTemplates", void 0);
    PanelBarItemComponent = PanelBarItemComponent_1 = tslib_1.__decorate([
        Component({
            animations: [
                trigger('toggle', [
                    state('inactive', style({ display: 'none', height: '0px' })),
                    transition('active => void', [
                        animate(200, style({ display: 'block', height: '0px' }))
                    ]),
                    transition('void => active', [
                        style({ display: 'block', height: '0px' }),
                        animate(200, style({ display: 'block', height: AUTO_STYLE }))
                    ]),
                    transition('inactive => active', [
                        style({ display: 'block', height: '0px' }),
                        animate(200, style({ display: 'block', height: AUTO_STYLE }))
                    ]),
                    transition('active => inactive', [
                        animate(200, style({ display: 'none', height: '0px' }))
                    ])
                ])
            ],
            exportAs: 'kendoPanelbarItem',
            selector: "kendo-panelbar-item",
            template: "<span\n                #header\n                [class.k-link]=\"true\"\n                [class.k-header]=\"!parent\"\n                [class.k-state-selected]=\"!disabled && selected\"\n                [class.k-state-focused]=\"!disabled && focused && wrapperFocused\"\n                (click)=\"onItemAction()\">\n            <span\n                *ngIf=\"icon || iconClass\"\n                class=\"k-icon\"\n                [ngClass]=\"iconClasses\">\n            </span>\n            <img\n                *ngIf=\"imageUrl\"\n                class=\"k-image\"\n                [src]=\"imageUrl\"\n                alt=\"\">\n            {{title}}\n            <ng-template [ngTemplateOutlet]=\"titleTemplate\"></ng-template>\n            <span *ngIf=\"hasChildItems || hasContent\"\n                [class.k-icon]=\"true\"\n                [class.k-i-arrow-n]=\"expanded\"\n                [class.k-panelbar-collapse]=\"expanded\"\n                [class.k-i-arrow-s]=\"!expanded\"\n                [class.k-panelbar-expand]=\"!expanded\">\n            </span>\n        </span>\n        <div\n            *ngIf=\"keepContent || (!disabled && expanded && (hasChildItems || hasContent))\"\n            [@toggle]=\"state\"\n            [style.overflow]=\"'hidden'\"\n            [attr.role]=\"'group'\"\n            [attr.aria-hidden]=\"!disabled && !expanded\">\n            <div\n                *ngIf=\"hasChildItems && !items?.length\"\n                [style.overflow]=\"contentOverflow\"\n                [style.height]=\"contentHeight\"\n                class=\"k-panel k-group\">\n                    <ng-content select=\"kendo-panelbar-item\"></ng-content>\n            </div>\n            <div\n                *ngIf=\"hasContent && !content\"\n                [style.overflow]=\"contentOverflow\"\n                [style.height]=\"contentHeight\"\n                class=\"k-content\">\n                <ng-template\n                    [ngTemplateOutlet]=\"contentTemplate.first.templateRef\"\n                    [ngTemplateOutletContext]=\"{\n                        $implicit: {\n                            title: title,\n                            id: id,\n                            icon: icon,\n                            imageUrl: imageUrl,\n                            disabled: disabled,\n                            content: content\n                        }\n                    }\">\n                </ng-template>\n            </div>\n            <div\n                *ngIf=\"items?.length\"\n                [style.overflow]=\"contentOverflow\"\n                [style.height]=\"contentHeight\"\n                class=\"k-panel k-group\">\n                    <kendo-panelbar-item\n                        *ngFor=\"let item of items\"\n                        [title]=\"item.title\"\n                        [id]=\"item.id\"\n                        [icon]=\"item.icon\"\n                        [iconClass]=\"item.iconClass\"\n                        [imageUrl]=\"item.imageUrl\"\n                        [selected]=\"!!item.selected\"\n                        [expanded]=\"!!item.expanded\"\n                        [disabled]=\"!!item.disabled\"\n                        [template]=\"template\"\n                        [items]=\"item.children\"\n                        [content]=\"item.content\">\n                    </kendo-panelbar-item>\n            </div>\n            <div\n                *ngIf=\"content\"\n                [style.overflow]=\"contentOverflow\"\n                [style.height]=\"contentHeight\"\n                class=\"k-content\">\n                <ng-template\n                    [ngTemplateOutlet]=\"template\"\n                    [ngTemplateOutletContext]=\"{\n                        $implicit: {\n                            title: title,\n                            id: id,\n                            icon: icon,\n                            imageUrl: imageUrl,\n                            disabled: disabled,\n                            content: content\n                        }\n                    }\">\n                </ng-template>\n                <ng-template [ngIf]=\"!template\">{{content}}</ng-template>\n            </div>\n        </div>"
        }),
        tslib_1.__param(0, SkipSelf()), tslib_1.__param(0, Host()), tslib_1.__param(0, Optional()),
        tslib_1.__metadata("design:paramtypes", [PanelBarItemComponent,
            PanelBarService])
    ], PanelBarItemComponent);
    return PanelBarItemComponent;
    var PanelBarItemComponent_1;
}());
export { PanelBarItemComponent };
