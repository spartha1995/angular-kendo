import { HostBinding, Input, ViewChild } from '@angular/core';
import { exportSVG, exportImage } from '@progress/kendo-drawing';
import { ResizeSensorComponent } from '@progress/kendo-angular-resize-sensor';
/**
 * @hidden
 */
export class GaugeComponent {
    constructor(configurationService, themeService, intlService, ngZone, rtl) {
        this.configurationService = configurationService;
        this.themeService = themeService;
        this.intlService = intlService;
        this.ngZone = ngZone;
        this.rtl = rtl;
        /**
         * The maximum number of times the Gauge resizes per second.
         * Defaults to `10`. To disable the automatic resizing, set it to `0`.
         */
        this.resizeRateLimit = 10;
        this.theme = null;
        this.direction = rtl ? 'rtl' : 'ltr';
    }
    get className() {
        return true;
    }
    get dir() {
        return this.direction;
    }
    ngAfterViewChecked() {
        let updateMethod;
        if (!this.instance) {
            updateMethod = this.init;
        }
        else if (this.configurationService.hasChanges) {
            updateMethod = this.updateOptions;
        }
        else if (this.configurationService.valueChange) {
            updateMethod = this.setValues;
        }
        if (updateMethod) {
            this.ngZone.runOutsideAngular(() => {
                updateMethod.call(this);
                this.updateSize();
            });
        }
    }
    updateOptions() {
        this.instance.setOptions(this.configurationService.read());
    }
    setValues() {
        this.instance.allValues(this.configurationService.readValues());
    }
    ngOnChanges(changes) {
        this.configurationService.copyChanges('', changes);
    }
    ngOnDestroy() {
        if (this.instance) {
            this.instance.destroy();
        }
    }
    /**
     * Exports the Gauge as an image. The export operation is asynchronous and returns a promise.
     *
     * @param {ImageExportOptions} options - The parameters for the exported image.
     * @returns {Promise<string>} - A promise that will be resolved with a PNG image that is encoded as a Data URI.
     */
    exportImage(options = {}) {
        return this.exportVisual().then((visual) => {
            return exportImage(visual, options);
        });
    }
    /**
     * Exports the Gauge as an SVG document. The export operation is asynchronous and returns a promise.
     *
     * @param {SVGExportOptions} options - The parameters for the exported file.
     * @returns {Promise<string>} - A promise that will be resolved with an SVG document that is encoded as a Data URI.
     */
    exportSVG(options = {}) {
        return this.exportVisual().then((visual) => {
            return exportSVG(visual, options);
        });
    }
    /**
     * Exports the Gauge as a Drawing `Scene`.
     *
     * @returns {Promise<Group>} - A promise that will be resolved with the export visual.
     */
    exportVisual() {
        return Promise.resolve(this.instance.exportVisual());
    }
    /**
     * @hidden
     */
    onResize(_event) {
        if (this.autoResize) {
            this.resize();
        }
    }
    /**
     * Detects the size of the container and redraws the Gauge.
     * Resizing is automatic unless you set the `resizeRateLimit` option to `0`.
     */
    resize() {
        if (this.instance) {
            this.instance.resize();
        }
    }
    init() {
        if (typeof document === 'undefined') {
            return;
        }
        if (!this.surfaceElement) {
            return;
        }
        this.createInstance(this.surfaceElement.nativeElement, this.configurationService.read(), this.themeService.read(), {
            intlService: this.intlService,
            rtl: this.rtl
        });
    }
    get autoResize() {
        return this.resizeRateLimit > 0;
    }
    updateSize() {
        this.resizeSensor.acceptSize();
    }
}
GaugeComponent.propDecorators = {
    'gaugeArea': [{ type: Input },],
    'renderAs': [{ type: Input },],
    'resizeRateLimit': [{ type: Input },],
    'scale': [{ type: Input },],
    'transitions': [{ type: Input },],
    'surfaceElement': [{ type: ViewChild, args: ['surface',] },],
    'resizeSensor': [{ type: ViewChild, args: [ResizeSensorComponent,] },],
    'className': [{ type: HostBinding, args: ['class.k-gauge',] },],
    'dir': [{ type: HostBinding, args: ['attr.dir',] },],
};
